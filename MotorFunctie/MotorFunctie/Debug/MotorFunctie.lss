
MotorFunctie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000725  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 90 00 	call	0x120	; 0x120 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motorInit>:
		motorFunctie(2500, 'R');	
	}
}

void motorInit(void) {
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD7);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8a b9       	out	0x0a, r24	; 10
	// - CS1[2:0] = 011 : 64 prescaler
	//
	// TOP = (F_CPU / (F_PWM * N)) - 1
	// = (16MHz / (50Hz * 64)) - 1
	// = 4999
	TCCR1A |= (1<<WGM11);
  8c:	e0 e8       	ldi	r30, 0x80	; 128
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  96:	a1 e8       	ldi	r26, 0x81	; 129
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	8b 61       	ori	r24, 0x1B	; 27
  9e:	8c 93       	st	X, r24
	ICR1 = 4999;
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	93 e1       	ldi	r25, 0x13	; 19
  a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// The mode is fast-PWM
	// COM1A[1:0] = 10 : Clear OC1A/OC1B on compare match, set OC1A/OC1B at
	// BOTTOM (non-inverting mode)
	// COM1B[1:0] = 11 : Set OC1A/OC1B on compare match, clear OC1A/OC1B at
	// BOTTOM (non-inverting mode)
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
  ac:	80 81       	ld	r24, Z
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <motorFunctie>:
}

void motorFunctie(int speed, int dir) {	
	switch (dir) {
  b4:	66 34       	cpi	r22, 0x46	; 70
  b6:	71 05       	cpc	r23, r1
  b8:	21 f0       	breq	.+8      	; 0xc2 <motorFunctie+0xe>
  ba:	62 35       	cpi	r22, 0x52	; 82
  bc:	71 05       	cpc	r23, r1
  be:	81 f0       	breq	.+32     	; 0xe0 <motorFunctie+0x2c>
  c0:	1e c0       	rjmp	.+60     	; 0xfe <motorFunctie+0x4a>
		
		//forwards
		case 'F':
		//set both motors in forward mode
		PORTB |= (1<<DDB0);
  c2:	25 b1       	in	r18, 0x05	; 5
  c4:	21 60       	ori	r18, 0x01	; 1
  c6:	25 b9       	out	0x05, r18	; 5
		PORTD |= (1<<DDD7);
  c8:	2b b1       	in	r18, 0x0b	; 11
  ca:	20 68       	ori	r18, 0x80	; 128
  cc:	2b b9       	out	0x0b, r18	; 11
		
		//sets the motor speed
		OCR1A = speed;
  ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
  d6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  da:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
  de:	08 95       	ret
		
		case 'R':
		PORTB |= (1<<DDB0);
  e0:	25 b1       	in	r18, 0x05	; 5
  e2:	21 60       	ori	r18, 0x01	; 1
  e4:	25 b9       	out	0x05, r18	; 5
		PORTD &= ~(1<<DDD7);
  e6:	2b b1       	in	r18, 0x0b	; 11
  e8:	2f 77       	andi	r18, 0x7F	; 127
  ea:	2b b9       	out	0x0b, r18	; 11
		
		OCR1A = speed;
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
  f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
  fc:	08 95       	ret
		
		
		//the default makes the car stop
		default:
		//sets the pins too low
		PORTB &= ~(1<<DDB1);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<DDB2);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	85 b9       	out	0x05, r24	; 5
		//sets the compare too high so it won't set the pins too high
		OCR1A = 10000;
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	97 e2       	ldi	r25, 0x27	; 39
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 10000;	
 116:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 11e:	08 95       	ret

00000120 <main>:

void motorInit(void);

int main(void)
{
	motorInit();
 120:	0e 94 40 00 	call	0x80	; 0x80 <motorInit>
	while (1)
	{
		motorFunctie(2500, 'R');	
 124:	62 e5       	ldi	r22, 0x52	; 82
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	84 ec       	ldi	r24, 0xC4	; 196
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	0e 94 5a 00 	call	0xb4	; 0xb4 <motorFunctie>
 130:	f9 cf       	rjmp	.-14     	; 0x124 <main+0x4>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
