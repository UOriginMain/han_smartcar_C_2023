
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  00800140  00800140  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187d  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd8  00000000  00000000  00002335  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f6a  00000000  00000000  0000300d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ad  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6e  00000000  00000000  00004b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000055af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	44 65       	ori	r20, 0x54	; 84
  6a:	62 75       	andi	r22, 0x52	; 82
  6c:	67 67       	ori	r22, 0x77	; 119
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e8       	ldi	r30, 0x8A	; 138
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 34       	cpi	r26, 0x40	; 64
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e4       	ldi	r26, 0x40	; 64
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a5 39       	cpi	r26, 0x95	; 149
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  a6:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <buttonsInit>:
#define selectResetButton DDD3


void buttonsInit() {
	//sets the pins so it are input pins
	DDRB &= ~(1<<scrollButton);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<selectResetButton);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	8a b9       	out	0x0a, r24	; 10
	
	//temp for testing becuase this is for pull up
	PORTB |= (1<<PORTB2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1<<PORTD3);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret

000000c8 <scrollInMenu>:
}

int scrollInMenu() {
	unsigned char buttonState = PINB & 0b00000100;
	if ((buttonState & (1<<scrollButton)) == 0) {
  c8:	1a 99       	sbic	0x03, 2	; 3
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <scrollInMenu+0xa>
		return 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret
		} else {
		return 0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  d6:	08 95       	ret

000000d8 <selectMode>:

int selectMode() {
	unsigned char buttonState = PIND & 0b00001000;
	if ((buttonState & (1<<selectResetButton)) == 0) {
  d8:	4b 99       	sbic	0x09, 3	; 9
  da:	03 c0       	rjmp	.+6      	; 0xe2 <selectMode+0xa>
		return 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
		} else {
		return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	}
  e6:	08 95       	ret

000000e8 <printWelcomeScreen>:
enum Modes {Slave, Bluetooth, Autonoom};

extern void lcd_backlight(char on);    //not in lcd.h

void printWelcomeScreen(void) {
	lcd_clrscr();
  e8:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_clrscr>
	lcd_gotoxy(0, 0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
	lcd_puts_P("Debuggy");
  f4:	88 e6       	ldi	r24, 0x68	; 104
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_puts_p>
	lcd_gotoxy(0, 1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
	lcd_puts("Team Antimotive"); 
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_puts>
 10c:	08 95       	ret

0000010e <lcdDisplayInit>:
}

void lcdDisplayInit(void) {
	 lcd_init(LCD_ON_DISPLAY);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 89 01 	call	0x312	; 0x312 <lcd_init>
	 lcd_backlight(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 00 02 	call	0x400	; 0x400 <lcd_backlight>
	 lcd_backlight(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 00 02 	call	0x400	; 0x400 <lcd_backlight>
	 printWelcomeScreen();
 120:	0e 94 74 00 	call	0xe8	; 0xe8 <printWelcomeScreen>
 124:	08 95       	ret

00000126 <printModeScreen>:
}

void printModeScreen(enum Modes mode) {
	switch (mode) {
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	79 f0       	breq	.+30     	; 0x148 <printModeScreen+0x22>
 12a:	18 f0       	brcs	.+6      	; 0x132 <printModeScreen+0xc>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	b9 f0       	breq	.+46     	; 0x15e <printModeScreen+0x38>
 130:	21 c0       	rjmp	.+66     	; 0x174 <printModeScreen+0x4e>
		case Slave:
		lcd_clrscr();
 132:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_clrscr>
		lcd_gotoxy(1, 1);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
		lcd_puts("Slave");
 13e:	85 e1       	ldi	r24, 0x15	; 21
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_puts>
		break;
 146:	08 95       	ret
		
		case Bluetooth:
		lcd_clrscr();
 148:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_clrscr>
		lcd_gotoxy(1, 1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
		lcd_puts("Bluetooth");
 154:	8b e1       	ldi	r24, 0x1B	; 27
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_puts>
		break;
 15c:	08 95       	ret
		
		case Autonoom:
		lcd_clrscr();
 15e:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_clrscr>
		lcd_gotoxy(1, 1);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
		lcd_puts("Autonoom");
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_puts>
		break;
 172:	08 95       	ret
		
		default:
		lcd_clrscr();
 174:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_clrscr>
		lcd_gotoxy(1,1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
		lcd_puts("hoe kom jij hier");
 180:	8e e2       	ldi	r24, 0x2E	; 46
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_puts>
 188:	08 95       	ret

0000018a <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8b 01       	movw	r16, r22
 194:	d4 2f       	mov	r29, r20
 196:	88 0f       	add	r24, r24
 198:	0e 94 83 03 	call	0x706	; 0x706 <i2c_start>
 19c:	88 23       	and	r24, r24
 19e:	51 f0       	breq	.+20     	; 0x1b4 <I2C_WRITESEQ+0x2a>
 1a0:	c1 e0       	ldi	r28, 0x01	; 1
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <I2C_WRITESEQ+0x32>
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	f1 1d       	adc	r31, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	0e 94 b1 03 	call	0x762	; 0x762 <i2c_write>
 1b0:	cf 5f       	subi	r28, 0xFF	; 255
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <I2C_WRITESEQ+0x2c>
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	cd 17       	cp	r28, r29
 1b8:	a8 f3       	brcs	.-22     	; 0x1a4 <I2C_WRITESEQ+0x1a>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_stop>
 1c0:	8c 2f       	mov	r24, r28
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	08 95       	ret

000001cc <wr_lcd_mode>:
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <wr_lcd_mode+0xa>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <wr_lcd_mode+0xc>
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	08 2f       	mov	r16, r24
 1e0:	68 30       	cpi	r22, 0x08	; 8
 1e2:	71 f4       	brne	.+28     	; 0x200 <wr_lcd_mode+0x34>
 1e4:	88 23       	and	r24, r24
 1e6:	11 f0       	breq	.+4      	; 0x1ec <wr_lcd_mode+0x20>
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <wr_lcd_mode+0x22>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	87 e2       	ldi	r24, 0x27	; 39
 1fa:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 1fe:	26 c0       	rjmp	.+76     	; 0x24c <wr_lcd_mode+0x80>
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	16 2f       	mov	r17, r22
 206:	18 2b       	or	r17, r24
 208:	19 83       	std	Y+1, r17	; 0x01
 20a:	80 2f       	mov	r24, r16
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	81 2b       	or	r24, r17
 210:	84 60       	ori	r24, 0x04	; 4
 212:	8a 83       	std	Y+2, r24	; 0x02
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	8b 83       	std	Y+3, r24	; 0x03
 218:	20 e1       	ldi	r18, 0x10	; 16
 21a:	02 9f       	mul	r16, r18
 21c:	c0 01       	movw	r24, r0
 21e:	11 24       	eor	r1, r1
 220:	81 2b       	or	r24, r17
 222:	84 60       	ori	r24, 0x04	; 4
 224:	8c 83       	std	Y+4, r24	; 0x04
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	8d 83       	std	Y+5, r24	; 0x05
 22a:	45 e0       	ldi	r20, 0x05	; 5
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	87 e2       	ldi	r24, 0x27	; 39
 234:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 238:	10 fd       	sbrc	r17, 0
 23a:	08 c0       	rjmp	.+16     	; 0x24c <wr_lcd_mode+0x80>
 23c:	03 30       	cpi	r16, 0x03	; 3
 23e:	30 f4       	brcc	.+12     	; 0x24c <wr_lcd_mode+0x80>
 240:	e3 ef       	ldi	r30, 0xF3	; 243
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <wr_lcd_mode+0x78>
 248:	00 c0       	rjmp	.+0      	; 0x24a <wr_lcd_mode+0x7e>
 24a:	00 00       	nop
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <lcd_gotoxy>:
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	d8 2f       	mov	r29, r24
 266:	c6 2f       	mov	r28, r22
 268:	e6 2f       	mov	r30, r22
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ef 5f       	subi	r30, 0xFF	; 255
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 81       	ld	r24, Z
 272:	8d 2b       	or	r24, r29
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	80 68       	ori	r24, 0x80	; 128
 278:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
 27c:	d0 93 92 01 	sts	0x0192, r29	; 0x800192 <_lcd_x>
 280:	c0 93 93 01 	sts	0x0193, r28	; 0x800193 <_lcd_y>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <lcd_clrscr>:
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
 292:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_lcd_y>
 296:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_lcd_x>
 29a:	08 95       	ret

0000029c <lcd_putc>:
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
 2a0:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <_lcd_x>
 2a4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_lcd_maxx>
 2a8:	98 17       	cp	r25, r24
 2aa:	10 f4       	brcc	.+4      	; 0x2b0 <lcd_putc+0x14>
 2ac:	ca 30       	cpi	r28, 0x0A	; 10
 2ae:	41 f4       	brne	.+16     	; 0x2c0 <lcd_putc+0x24>
 2b0:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <_lcd_y>
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <_lcd_y>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 30 01 	call	0x260	; 0x260 <lcd_gotoxy>
 2c0:	ca 30       	cpi	r28, 0x0A	; 10
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <lcd_putc+0x3a>
 2c4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_lcd_x>
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_lcd_x>
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <lcd_puts>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <lcd_puts+0xe>
 2e2:	21 96       	adiw	r28, 0x01	; 1
 2e4:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_putc>
 2e8:	88 81       	ld	r24, Y
 2ea:	81 11       	cpse	r24, r1
 2ec:	fa cf       	rjmp	.-12     	; 0x2e2 <lcd_puts+0x8>
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <lcd_puts_p>:
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	fc 01       	movw	r30, r24
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <lcd_puts_p+0xe>
 2fc:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_putc>
 300:	fe 01       	movw	r30, r28
 302:	ef 01       	movw	r28, r30
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	84 91       	lpm	r24, Z
 308:	81 11       	cpse	r24, r1
 30a:	f8 cf       	rjmp	.-16     	; 0x2fc <lcd_puts_p+0x8>
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <lcd_init+0xa>
 31c:	00 d0       	rcall	.+0      	; 0x31e <lcd_init+0xc>
 31e:	00 d0       	rcall	.+0      	; 0x320 <lcd_init+0xe>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 326:	80 e3       	ldi	r24, 0x30	; 48
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	94 e3       	ldi	r25, 0x34	; 52
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	8c 83       	std	Y+4, r24	; 0x04
 334:	94 e2       	ldi	r25, 0x24	; 36
 336:	9d 83       	std	Y+5, r25	; 0x05
 338:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 33a:	80 e1       	ldi	r24, 0x10	; 16
 33c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 340:	e1 e0       	ldi	r30, 0x01	; 1
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	80 81       	ld	r24, Z
 346:	80 5f       	subi	r24, 0xF0	; 240
 348:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 34a:	81 81       	ldd	r24, Z+1	; 0x01
 34c:	80 5f       	subi	r24, 0xF0	; 240
 34e:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 350:	84 b1       	in	r24, 0x04	; 4
 352:	80 62       	ori	r24, 0x20	; 32
 354:	84 b9       	out	0x04, r24	; 4
 356:	85 b1       	in	r24, 0x05	; 5
 358:	80 62       	ori	r24, 0x20	; 32
 35a:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 35c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	8b e4       	ldi	r24, 0x4B	; 75
 362:	9d e1       	ldi	r25, 0x1D	; 29
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x52>
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_init+0x58>
 36a:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 36c:	43 e0       	ldi	r20, 0x03	; 3
 36e:	be 01       	movw	r22, r28
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	87 e2       	ldi	r24, 0x27	; 39
 376:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 37a:	18 2f       	mov	r17, r24
 37c:	81 ee       	ldi	r24, 0xE1	; 225
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x6e>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0x74>
 386:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 388:	43 e0       	ldi	r20, 0x03	; 3
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	87 e2       	ldi	r24, 0x27	; 39
 392:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 396:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 398:	43 e0       	ldi	r20, 0x03	; 3
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	87 e2       	ldi	r24, 0x27	; 39
 3a2:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 3a6:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 3a8:	43 e0       	ldi	r20, 0x03	; 3
 3aa:	be 01       	movw	r22, r28
 3ac:	6c 5f       	subi	r22, 0xFC	; 252
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	87 e2       	ldi	r24, 0x27	; 39
 3b2:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_WRITESEQ>
 3b6:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	88 e2       	ldi	r24, 0x28	; 40
 3bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
 3c0:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 3c2:	19 f0       	breq	.+6      	; 0x3ca <lcd_init+0xb8>
 3c4:	85 b1       	in	r24, 0x05	; 5
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 2f       	mov	r24, r16
 3e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
}
 3ea:	26 96       	adiw	r28, 0x06	; 6
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 400:	68 e0       	ldi	r22, 0x08	; 8
 402:	0e 94 e6 00 	call	0x1cc	; 0x1cc <wr_lcd_mode>
 406:	08 95       	ret

00000408 <setup>:
enum Modes {Slave, Bluetooth, Autonoom, Stop} mode;

long lastPrint = 0;

void setup(void) {
	buttonsInit();
 408:	0e 94 57 00 	call	0xae	; 0xae <buttonsInit>
	millis_init();
 40c:	0e 94 67 02 	call	0x4ce	; 0x4ce <millis_init>
	lcdDisplayInit();
 410:	0e 94 87 00 	call	0x10e	; 0x10e <lcdDisplayInit>
 414:	08 95       	ret

00000416 <loop>:
	
}

void loop(void) {
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
	if (scrollInMenu()) {
 41e:	0e 94 64 00 	call	0xc8	; 0xc8 <scrollInMenu>
 422:	89 2b       	or	r24, r25
 424:	81 f0       	breq	.+32     	; 0x446 <loop+0x30>
		if (mode < Autonoom) {
 426:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <mode>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	20 f4       	brcc	.+8      	; 0x436 <loop+0x20>
			mode++;
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <mode>
 434:	08 c0       	rjmp	.+16     	; 0x446 <loop+0x30>
			} else if (mode == Autonoom) {
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	19 f4       	brne	.+6      	; 0x440 <loop+0x2a>
			mode = Slave;
 43a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <mode>
 43e:	03 c0       	rjmp	.+6      	; 0x446 <loop+0x30>
			} else {
			mode = Stop;
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <mode>
		}
	}
	
	if (lastPrint + 1000 < millis()) {
 446:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <__data_end>
 44a:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <__data_end+0x1>
 44e:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <__data_end+0x2>
 452:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <__data_end+0x3>
 456:	88 ee       	ldi	r24, 0xE8	; 232
 458:	c8 0e       	add	r12, r24
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	d8 1e       	adc	r13, r24
 45e:	e1 1c       	adc	r14, r1
 460:	f1 1c       	adc	r15, r1
 462:	0e 94 a7 02 	call	0x54e	; 0x54e <millis>
 466:	c6 16       	cp	r12, r22
 468:	d7 06       	cpc	r13, r23
 46a:	e8 06       	cpc	r14, r24
 46c:	f9 06       	cpc	r15, r25
 46e:	78 f4       	brcc	.+30     	; 0x48e <loop+0x78>
		printModeScreen(mode);
 470:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <mode>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 93 00 	call	0x126	; 0x126 <printModeScreen>
		lastPrint = millis();
 47a:	0e 94 a7 02 	call	0x54e	; 0x54e <millis>
 47e:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <__data_end>
 482:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <__data_end+0x1>
 486:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x2>
 48a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x3>
	}
	
	
	if (selectMode()) {
 48e:	0e 94 6c 00 	call	0xd8	; 0xd8 <selectMode>
 492:	89 2b       	or	r24, r25
 494:	21 f0       	breq	.+8      	; 0x49e <loop+0x88>
		PORTB |= (1<<DDB5);
 496:	85 b1       	in	r24, 0x05	; 5
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	85 b9       	out	0x05, r24	; 5
 49c:	0b c0       	rjmp	.+22     	; 0x4b4 <loop+0x9e>
		} else if (scrollInMenu()) {
 49e:	0e 94 64 00 	call	0xc8	; 0xc8 <scrollInMenu>
 4a2:	89 2b       	or	r24, r25
 4a4:	21 f0       	breq	.+8      	; 0x4ae <loop+0x98>
		PORTB |= (1<<DDB5);
 4a6:	85 b1       	in	r24, 0x05	; 5
 4a8:	80 62       	ori	r24, 0x20	; 32
 4aa:	85 b9       	out	0x05, r24	; 5
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <loop+0x9e>
		} else {
		PORTB &= ~(1<<DDB5);
 4ae:	85 b1       	in	r24, 0x05	; 5
 4b0:	8f 7d       	andi	r24, 0xDF	; 223
 4b2:	85 b9       	out	0x05, r24	; 5
	}
	
}
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	08 95       	ret

000004be <main>:

int main(void)
{
	setup();
 4be:	0e 94 04 02 	call	0x408	; 0x408 <setup>
	DDRB |= (1<<DDB5);
 4c2:	84 b1       	in	r24, 0x04	; 4
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	84 b9       	out	0x04, r24	; 4
	
	while (1) {
		loop();
 4c8:	0e 94 0b 02 	call	0x416	; 0x416 <loop>
 4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <main+0xa>

000004ce <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 4ce:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ms>
 4d2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ms+0x1>
 4d6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ms+0x2>
 4da:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <ms+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR2A |= (1<<WGM01);
 4de:	e0 eb       	ldi	r30, 0xB0	; 176
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS01) | (1<<CS00);
 4e8:	e1 eb       	ldi	r30, 0xB1	; 177
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	83 60       	ori	r24, 0x03	; 3
 4f0:	80 83       	st	Z, r24
	OCR2A = 249;
 4f2:	89 ef       	ldi	r24, 0xF9	; 249
 4f4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK2 |= (1<<OCIE0A);
 4f8:	e0 e7       	ldi	r30, 0x70	; 112
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	80 83       	st	Z, r24
 502:	08 95       	ret

00000504 <__vector_7>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER2_COMPA_vect)
{
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
	ms++;
 516:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <ms>
 51a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <ms+0x1>
 51e:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <ms+0x2>
 522:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <ms+0x3>
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	a1 1d       	adc	r26, r1
 52a:	b1 1d       	adc	r27, r1
 52c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <ms>
 530:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <ms+0x1>
 534:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <ms+0x2>
 538:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <ms+0x3>
}
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 54e:	f8 94       	cli
	uint32_t ret = ms;
 550:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <ms>
 554:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <ms+0x1>
 558:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ms+0x2>
 55c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ms+0x3>
	sei();
 560:	78 94       	sei
	return ret;
 562:	08 95       	ret

00000564 <__vector_1>:
static volatile unsigned char SoftSerialTXBitCount; // TX bit counter.
static volatile unsigned char SoftSerialRXBits;     // Storage for received bits.
static volatile unsigned char SoftSerialRXBitCount; // RX bit counter.

ISR(INT0_vect)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	8f 93       	push	r24
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31

#ifdef DBG_ENABLE
    PORT |= (1 << DBG_PIN);
#endif

    state = RECEIVE;
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <state>

    // Disable interrupts while receiving bits
    EIMSK &= ~(1 << INT0);
 57a:	8d b3       	in	r24, 0x1d	; 29
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	8d bb       	out	0x1d, r24	; 29

    // Disable timer interrupts to update the registers
    TIMSK0 &= ~(1 << OCIE0A);
 580:	ee e6       	ldi	r30, 0x6E	; 110
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8d 7f       	andi	r24, 0xFD	; 253
 588:	80 83       	st	Z, r24

    // Reset the prescaler, stopping the timer/counter
    TCCR0B &= ~((1 << CS01) | ( 1 << CS00 ));
 58a:	85 b5       	in	r24, 0x25	; 37
 58c:	8c 7f       	andi	r24, 0xFC	; 252
 58e:	85 bd       	out	0x25, r24	; 37

    // This ISR takes time to execute. Compensate for this time by starting 
    // from 1, which is equal to approximately 4 us ((1/16MHz) * 64)
    TCNT0 = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	86 bd       	out	0x26, r24	; 38

    // Count 1.5 period in the future
    OCR0A = 39;
 594:	87 e2       	ldi	r24, 0x27	; 39
 596:	87 bd       	out	0x27, r24	; 39

    // Set prescaler and start the timer/counter
    TCCR0B |= (1 << CS01) | (1 << CS00);
 598:	85 b5       	in	r24, 0x25	; 37
 59a:	83 60       	ori	r24, 0x03	; 3
 59c:	85 bd       	out	0x25, r24	; 37

    // Clear received bit counter
    SoftSerialRXBitCount = 0;
 59e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <SoftSerialRXBitCount>
    SoftSerialRXBits = 0;
 5a2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SoftSerialRXBits>
    
    // Clear the interrupt flag and enable timer/counter interrupt
    TIFR0 |= (1 << OCF0A);
 5a6:	85 b3       	in	r24, 0x15	; 21
 5a8:	82 60       	ori	r24, 0x02	; 2
 5aa:	85 bb       	out	0x15, r24	; 21
    TIMSK0 |= (1 << OCIE0A);
 5ac:	80 81       	ld	r24, Z
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	80 83       	st	Z, r24

#ifdef DBG_ENABLE
    PORTD &= ~(1 << DBG_PIN);
#endif

}
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31

#ifdef DBG_ENABLE
    PORTD |= (1 << DBG_PIN);
#endif

    switch (state) 
 5d4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <state>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	39 f1       	breq	.+78     	; 0x62a <__vector_14+0x68>
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_14+0x20>
 5e0:	4d c0       	rjmp	.+154    	; 0x67c <__vector_14+0xba>
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__vector_14+0x26>
 5e6:	7e c0       	rjmp	.+252    	; 0x6e4 <__vector_14+0x122>
    {
    // Transmitting a byte
    case TRANSMIT:
    {
        // All bits not send?
        if(SoftSerialTXBitCount < 8 )
 5e8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <SoftSerialTXBitCount>
 5ec:	88 30       	cpi	r24, 0x08	; 8
 5ee:	b0 f4       	brcc	.+44     	; 0x61c <__vector_14+0x5a>
        {
            // Is the LSB logic 1?
            if(SoftSerialTXBits & 0x01) 
 5f0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SoftSerialTXBits>
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <__vector_14+0x3e>
            {           
                SET_TX_PIN();
 5f8:	8b b1       	in	r24, 0x0b	; 11
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	8b b9       	out	0x0b, r24	; 11
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <__vector_14+0x44>
            }
            else 
            {
                CLEAR_TX_PIN();
 600:	8b b1       	in	r24, 0x0b	; 11
 602:	8d 7f       	andi	r24, 0xFD	; 253
 604:	8b b9       	out	0x0b, r24	; 11
            }

            // Select the next bit and count the number of transmitted bits
            // LSB first
            SoftSerialTXBits = SoftSerialTXBits >> 1;
 606:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SoftSerialTXBits>
 60a:	86 95       	lsr	r24
 60c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SoftSerialTXBits>
            SoftSerialTXBitCount++;
 610:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <SoftSerialTXBitCount>
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <SoftSerialTXBitCount>
 61a:	66 c0       	rjmp	.+204    	; 0x6e8 <__vector_14+0x126>
        }
        else 
        {
            // All bits transmitted, send the stop bit
            SET_TX_PIN();
 61c:	8b b1       	in	r24, 0x0b	; 11
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	8b b9       	out	0x0b, r24	; 11

            state = TRANSMIT_STOP_BIT;
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <state>
 628:	5f c0       	rjmp	.+190    	; 0x6e8 <__vector_14+0x126>

    // Transmitting stop bit
    case TRANSMIT_STOP_BIT:
    {
        // More data in the buffer for transmitting?
        if(SoftSerial_TxHead != SoftSerial_TxTail)
 62a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <SoftSerial_TxHead>
 62e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <SoftSerial_TxTail>
 632:	98 17       	cp	r25, r24
 634:	a9 f0       	breq	.+42     	; 0x660 <__vector_14+0x9e>
        {
            unsigned char tmptail;

            // Calculate buffer index
            tmptail = ( SoftSerial_TxTail + 1 ) & SOFTSERIAL_TX_BUFFER_MASK;
 636:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <SoftSerial_TxTail>
 63a:	ef 5f       	subi	r30, 0xFF	; 255
 63c:	ef 71       	andi	r30, 0x1F	; 31
        
            // Store new index
            SoftSerial_TxTail = tmptail;
 63e:	e0 93 4d 01 	sts	0x014D, r30	; 0x80014d <SoftSerial_TxTail>
        
            // Start transmission
            state = TRANSMIT;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <state>
            
            // Clear the TX pin marking the beginning of the start bit
            PORTD &= ~(1 << TX_PIN);
 648:	8b b1       	in	r24, 0x0b	; 11
 64a:	8d 7f       	andi	r24, 0xFD	; 253
 64c:	8b b9       	out	0x0b, r24	; 11

            // Put the byte in the TX buffer
            SoftSerialTXBits = SoftSerial_TxBuf[tmptail];
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	e1 5b       	subi	r30, 0xB1	; 177
 652:	fe 4f       	sbci	r31, 0xFE	; 254
 654:	80 81       	ld	r24, Z
 656:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SoftSerialTXBits>
            SoftSerialTXBitCount = 0;
 65a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SoftSerialTXBitCount>
 65e:	44 c0       	rjmp	.+136    	; 0x6e8 <__vector_14+0x126>
        }
        else
        {
            // No more data in transmit buffer
            // Disable timer interrupts
            TIMSK0 &= ~(1 << OCIE0A);
 660:	ee e6       	ldi	r30, 0x6E	; 110
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8d 7f       	andi	r24, 0xFD	; 253
 668:	80 83       	st	Z, r24

            state = IDLE;
 66a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <state>
            
            // Reset external interrupt flag (if any) and enable external 
            // interrupt
            EIFR |= (1 << INTF0);
 66e:	8c b3       	in	r24, 0x1c	; 28
 670:	81 60       	ori	r24, 0x01	; 1
 672:	8c bb       	out	0x1c, r24	; 28
            EIMSK |= (1 << INT0);
 674:	8d b3       	in	r24, 0x1d	; 29
 676:	81 60       	ori	r24, 0x01	; 1
 678:	8d bb       	out	0x1d, r24	; 29
 67a:	36 c0       	rjmp	.+108    	; 0x6e8 <__vector_14+0x126>

    // Receiving a byte
    case RECEIVE:
    {
        // Count 1 period in the future
        OCR0A = 25;
 67c:	89 e1       	ldi	r24, 0x19	; 25
 67e:	87 bd       	out	0x27, r24	; 39
        
        // Not all bits received (LSB first)?
        if(SoftSerialRXBitCount < 8) 
 680:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <SoftSerialRXBitCount>
 684:	88 30       	cpi	r24, 0x08	; 8
 686:	90 f4       	brcc	.+36     	; 0x6ac <__vector_14+0xea>
        {
            // Select the next bit position
            SoftSerialRXBitCount++;
 688:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <SoftSerialRXBitCount>
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <SoftSerialRXBitCount>
            SoftSerialRXBits = SoftSerialRXBits >> 1;
 692:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <SoftSerialRXBits>
 696:	86 95       	lsr	r24
 698:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SoftSerialRXBits>

            // Is the RX pin set?
            if(GET_RX_PIN() != 0)
 69c:	4a 9b       	sbis	0x09, 2	; 9
 69e:	24 c0       	rjmp	.+72     	; 0x6e8 <__vector_14+0x126>
            {
                // Also set the current bit position
                SoftSerialRXBits |= 0x80;
 6a0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <SoftSerialRXBits>
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SoftSerialRXBits>
 6aa:	1e c0       	rjmp	.+60     	; 0x6e8 <__vector_14+0x126>
        }
        else 
        {
            // All bits received
            // Disable timer/counter interrupt
            TIMSK0 &= ~(1 << OCIE0A);
 6ac:	ee e6       	ldi	r30, 0x6E	; 110
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	8d 7f       	andi	r24, 0xFD	; 253
 6b4:	80 83       	st	Z, r24

            // Reset external interrupt flag (if any) and enable external
            // interrupt
            EIFR |= (1 << INTF0);
 6b6:	8c b3       	in	r24, 0x1c	; 28
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	8c bb       	out	0x1c, r24	; 28
            EIMSK |= (1 << INT0);
 6bc:	8d b3       	in	r24, 0x1d	; 29
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	8d bb       	out	0x1d, r24	; 29

            unsigned char tmphead;
    
            // Calculate buffer index
            tmphead = (SoftSerial_RxHead + 1) & SOFTSERIAL_RX_BUFFER_MASK;
 6c2:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <SoftSerial_RxHead>
 6c6:	ef 5f       	subi	r30, 0xFF	; 255
 6c8:	ef 71       	andi	r30, 0x1F	; 31
    
            // Store new index
            SoftSerial_RxHead = tmphead;
 6ca:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <SoftSerial_RxHead>
    
            if (tmphead == SoftSerial_RxTail)
 6ce:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SoftSerial_RxTail>
            {
                // ERROR! Receive buffer overflow
            }
    
            // Store received data in buffer
            SoftSerial_RxBuf[tmphead] = SoftSerialRXBits;
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <SoftSerialRXBits>
 6d8:	ef 58       	subi	r30, 0x8F	; 143
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	80 83       	st	Z, r24

            state = IDLE;
 6de:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <state>
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <__vector_14+0x126>
    break;
    default:        
    {
        // Error, unknown state
        // Return to known state
        state = IDLE;
 6e4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <state>

#ifdef DBG_ENABLE
    PORTD &= ~(1 << DBG_PIN);
#endif

}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 6fa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6fe:	8c e0       	ldi	r24, 0x0C	; 12
 700:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 704:	08 95       	ret

00000706 <i2c_start>:
 706:	94 ea       	ldi	r25, 0xA4	; 164
 708:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 70c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 710:	99 23       	and	r25, r25
 712:	e4 f7       	brge	.-8      	; 0x70c <i2c_start+0x6>
 714:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 718:	98 7f       	andi	r25, 0xF8	; 248
 71a:	98 30       	cpi	r25, 0x08	; 8
 71c:	11 f0       	breq	.+4      	; 0x722 <i2c_start+0x1c>
 71e:	90 31       	cpi	r25, 0x10	; 16
 720:	91 f4       	brne	.+36     	; 0x746 <i2c_start+0x40>
 722:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 726:	84 e8       	ldi	r24, 0x84	; 132
 728:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 72c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 730:	88 23       	and	r24, r24
 732:	e4 f7       	brge	.-8      	; 0x72c <i2c_start+0x26>
 734:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 738:	88 7f       	andi	r24, 0xF8	; 248
 73a:	88 31       	cpi	r24, 0x18	; 24
 73c:	31 f0       	breq	.+12     	; 0x74a <i2c_start+0x44>
 73e:	80 34       	cpi	r24, 0x40	; 64
 740:	31 f4       	brne	.+12     	; 0x74e <i2c_start+0x48>
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	08 95       	ret
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	08 95       	ret

00000752 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 752:	84 e9       	ldi	r24, 0x94	; 148
 754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 758:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 75c:	84 fd       	sbrc	r24, 4
 75e:	fc cf       	rjmp	.-8      	; 0x758 <i2c_stop+0x6>

}/* i2c_stop */
 760:	08 95       	ret

00000762 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 762:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 766:	84 e8       	ldi	r24, 0x84	; 132
 768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 76c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 770:	88 23       	and	r24, r24
 772:	e4 f7       	brge	.-8      	; 0x76c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 774:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 778:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 77a:	88 32       	cpi	r24, 0x28	; 40
 77c:	11 f0       	breq	.+4      	; 0x782 <i2c_write+0x20>
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	08 95       	ret
	return 0;
 782:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
