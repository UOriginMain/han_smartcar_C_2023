
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000004c2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800116  00800116  0000056c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000128c  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a55  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa6  00000000  00000000  000023f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c3  00000000  00000000  000036ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  9e:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8b 01       	movw	r16, r22
  b0:	d4 2f       	mov	r29, r20
  b2:	88 0f       	add	r24, r24
  b4:	0e 94 1f 02 	call	0x43e	; 0x43e <i2c_start>
  b8:	88 23       	and	r24, r24
  ba:	51 f0       	breq	.+20     	; 0xd0 <I2C_WRITESEQ+0x2a>
  bc:	c1 e0       	ldi	r28, 0x01	; 1
  be:	0c c0       	rjmp	.+24     	; 0xd8 <I2C_WRITESEQ+0x32>
  c0:	f8 01       	movw	r30, r16
  c2:	ec 0f       	add	r30, r28
  c4:	f1 1d       	adc	r31, r1
  c6:	80 81       	ld	r24, Z
  c8:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_write>
  cc:	cf 5f       	subi	r28, 0xFF	; 255
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <I2C_WRITESEQ+0x2c>
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	cd 17       	cp	r28, r29
  d4:	a8 f3       	brcs	.-22     	; 0xc0 <I2C_WRITESEQ+0x1a>
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_stop>
  dc:	8c 2f       	mov	r24, r28
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <wr_lcd_mode>:
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <wr_lcd_mode+0xa>
  f2:	00 d0       	rcall	.+0      	; 0xf4 <wr_lcd_mode+0xc>
  f4:	1f 92       	push	r1
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	08 2f       	mov	r16, r24
  fc:	68 30       	cpi	r22, 0x08	; 8
  fe:	71 f4       	brne	.+28     	; 0x11c <wr_lcd_mode+0x34>
 100:	88 23       	and	r24, r24
 102:	11 f0       	breq	.+4      	; 0x108 <wr_lcd_mode+0x20>
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	01 c0       	rjmp	.+2      	; 0x10a <wr_lcd_mode+0x22>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	71 e0       	ldi	r23, 0x01	; 1
 114:	87 e2       	ldi	r24, 0x27	; 39
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 11a:	26 c0       	rjmp	.+76     	; 0x168 <wr_lcd_mode+0x80>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	16 2f       	mov	r17, r22
 122:	18 2b       	or	r17, r24
 124:	19 83       	std	Y+1, r17	; 0x01
 126:	80 2f       	mov	r24, r16
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	81 2b       	or	r24, r17
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	8a 83       	std	Y+2, r24	; 0x02
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	8b 83       	std	Y+3, r24	; 0x03
 134:	20 e1       	ldi	r18, 0x10	; 16
 136:	02 9f       	mul	r16, r18
 138:	c0 01       	movw	r24, r0
 13a:	11 24       	eor	r1, r1
 13c:	81 2b       	or	r24, r17
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	8c 83       	std	Y+4, r24	; 0x04
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	8d 83       	std	Y+5, r24	; 0x05
 146:	45 e0       	ldi	r20, 0x05	; 5
 148:	be 01       	movw	r22, r28
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	87 e2       	ldi	r24, 0x27	; 39
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 154:	10 fd       	sbrc	r17, 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <wr_lcd_mode+0x80>
 158:	03 30       	cpi	r16, 0x03	; 3
 15a:	30 f4       	brcc	.+12     	; 0x168 <wr_lcd_mode+0x80>
 15c:	e3 ef       	ldi	r30, 0xF3	; 243
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <wr_lcd_mode+0x78>
 164:	00 c0       	rjmp	.+0      	; 0x166 <wr_lcd_mode+0x7e>
 166:	00 00       	nop
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	d8 2f       	mov	r29, r24
 182:	c6 2f       	mov	r28, r22
 184:	e6 2f       	mov	r30, r22
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ef 5f       	subi	r30, 0xFF	; 255
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	80 81       	ld	r24, Z
 18e:	8d 2b       	or	r24, r29
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 68       	ori	r24, 0x80	; 128
 194:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
 198:	d0 93 1b 01 	sts	0x011B, r29	; 0x80011b <_lcd_x>
 19c:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <_lcd_y>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <lcd_clrscr>:
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
 1ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <_lcd_y>
 1b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_lcd_x>
 1b6:	08 95       	ret

000001b8 <lcd_putc>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_lcd_x>
 1c0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_lcd_maxx>
 1c4:	98 17       	cp	r25, r24
 1c6:	10 f4       	brcc	.+4      	; 0x1cc <lcd_putc+0x14>
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	41 f4       	brne	.+16     	; 0x1dc <lcd_putc+0x24>
 1cc:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <_lcd_y>
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <_lcd_y>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_gotoxy>
 1dc:	ca 30       	cpi	r28, 0x0A	; 10
 1de:	49 f0       	breq	.+18     	; 0x1f2 <lcd_putc+0x3a>
 1e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_lcd_x>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_lcd_x>
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <lcd_puts>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <lcd_puts+0xe>
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_putc>
 204:	88 81       	ld	r24, Y
 206:	81 11       	cpse	r24, r1
 208:	fa cf       	rjmp	.-12     	; 0x1fe <lcd_puts+0x8>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <lcd_init+0xa>
 21a:	00 d0       	rcall	.+0      	; 0x21c <lcd_init+0xc>
 21c:	00 d0       	rcall	.+0      	; 0x21e <lcd_init+0xe>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	94 e3       	ldi	r25, 0x34	; 52
 22a:	9a 83       	std	Y+2, r25	; 0x02
 22c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	8c 83       	std	Y+4, r24	; 0x04
 232:	94 e2       	ldi	r25, 0x24	; 36
 234:	9d 83       	std	Y+5, r25	; 0x05
 236:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	80 81       	ld	r24, Z
 244:	80 5f       	subi	r24, 0xF0	; 240
 246:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	80 5f       	subi	r24, 0xF0	; 240
 24c:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	80 62       	ori	r24, 0x20	; 32
 252:	84 b9       	out	0x04, r24	; 4
 254:	85 b1       	in	r24, 0x05	; 5
 256:	80 62       	ori	r24, 0x20	; 32
 258:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 25a:	0e 94 19 02 	call	0x432	; 0x432 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	8b e4       	ldi	r24, 0x4B	; 75
 260:	9d e1       	ldi	r25, 0x1D	; 29
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x52>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_init+0x58>
 268:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 26a:	43 e0       	ldi	r20, 0x03	; 3
 26c:	be 01       	movw	r22, r28
 26e:	6f 5f       	subi	r22, 0xFF	; 255
 270:	7f 4f       	sbci	r23, 0xFF	; 255
 272:	87 e2       	ldi	r24, 0x27	; 39
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 278:	18 2f       	mov	r17, r24
 27a:	81 ee       	ldi	r24, 0xE1	; 225
 27c:	94 e0       	ldi	r25, 0x04	; 4
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x6e>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init+0x74>
 284:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 286:	43 e0       	ldi	r20, 0x03	; 3
 288:	be 01       	movw	r22, r28
 28a:	6f 5f       	subi	r22, 0xFF	; 255
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	87 e2       	ldi	r24, 0x27	; 39
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 294:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 296:	43 e0       	ldi	r20, 0x03	; 3
 298:	be 01       	movw	r22, r28
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	87 e2       	ldi	r24, 0x27	; 39
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 2a4:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 2a6:	43 e0       	ldi	r20, 0x03	; 3
 2a8:	be 01       	movw	r22, r28
 2aa:	6c 5f       	subi	r22, 0xFC	; 252
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	87 e2       	ldi	r24, 0x27	; 39
 2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 2b4:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
 2be:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <lcd_init+0xb8>
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	8c e0       	ldi	r24, 0x0C	; 12
 2cc:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	80 2f       	mov	r24, r16
 2e4:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
}
 2e8:	26 96       	adiw	r28, 0x06	; 6
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 2fe:	68 e0       	ldi	r22, 0x08	; 8
 300:	0e 94 74 00 	call	0xe8	; 0xe8 <wr_lcd_mode>
 304:	08 95       	ret

00000306 <buttonsInit>:
			return 1;
	} else {
		PORTB &= ~(1<<DDB5);
		return 0;
	}
}
 306:	84 b1       	in	r24, 0x04	; 4
 308:	8b 7f       	andi	r24, 0xFB	; 251
 30a:	84 b9       	out	0x04, r24	; 4
 30c:	8a b1       	in	r24, 0x0a	; 10
 30e:	87 7f       	andi	r24, 0xF7	; 247
 310:	8a b9       	out	0x0a, r24	; 10
 312:	85 b1       	in	r24, 0x05	; 5
 314:	84 60       	ori	r24, 0x04	; 4
 316:	85 b9       	out	0x05, r24	; 5
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	08 95       	ret

00000320 <selectMode>:

int selectMode() {
	unsigned char buttonState = PIND & 0b00001000;
	if ((buttonState & (1<<DDD3)) == 0) {
 320:	4b 99       	sbic	0x09, 3	; 9
 322:	06 c0       	rjmp	.+12     	; 0x330 <selectMode+0x10>
		PORTB |= (1<<DDB5);
 324:	85 b1       	in	r24, 0x05	; 5
 326:	80 62       	ori	r24, 0x20	; 32
 328:	85 b9       	out	0x05, r24	; 5
		return 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret
		} else {
		PORTB &= ~(1<<DDB5);
 330:	85 b1       	in	r24, 0x05	; 5
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	85 b9       	out	0x05, r24	; 5
		return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 33a:	08 95       	ret

0000033c <main>:


int main(void)
{
    /* Replace with your application code */
	buttonsInit();
 33c:	0e 94 83 01 	call	0x306	; 0x306 <buttonsInit>
	millis_init();
 340:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <millis_init>
	lcd_init(LCD_ON_DISPLAY);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	lcd_backlight(1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_backlight>
	
	DDRB |= (1<<DDB5);
 350:	84 b1       	in	r24, 0x04	; 4
 352:	80 62       	ori	r24, 0x20	; 32
 354:	84 b9       	out	0x04, r24	; 4
	long milli = 0;
 356:	c1 2c       	mov	r12, r1
 358:	d1 2c       	mov	r13, r1
 35a:	76 01       	movw	r14, r12
	
    while (1) 
    {
		selectMode();
 35c:	0e 94 90 01 	call	0x320	; 0x320 <selectMode>
		
		lcd_clrscr();
 360:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_clrscr>
		lcd_gotoxy(5, 0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_gotoxy>
		lcd_puts("Hello World");
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
		lcd_gotoxy(1, 1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_gotoxy>
		lcd_puts("Hoi");
 37c:	81 e1       	ldi	r24, 0x11	; 17
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
		lcd_puts(milli);
 384:	c6 01       	movw	r24, r12
 386:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
 38a:	2f e3       	ldi	r18, 0x3F	; 63
 38c:	8d e0       	ldi	r24, 0x0D	; 13
 38e:	93 e0       	ldi	r25, 0x03	; 3
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x54>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x5e>
 39a:	00 00       	nop
		_delay_ms(1000);
		
		milli = millis();
 39c:	0e 94 0e 02 	call	0x41c	; 0x41c <millis>
 3a0:	6b 01       	movw	r12, r22
 3a2:	7c 01       	movw	r14, r24
 3a4:	db cf       	rjmp	.-74     	; 0x35c <main+0x20>

000003a6 <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 3a6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 3aa:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 3ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end+0x2>
 3b2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR0A |= (1<<WGM01);
 3b6:	84 b5       	in	r24, 0x24	; 36
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
 3bc:	85 b5       	in	r24, 0x25	; 37
 3be:	83 60       	ori	r24, 0x03	; 3
 3c0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
 3c2:	89 ef       	ldi	r24, 0xF9	; 249
 3c4:	87 bd       	out	0x27, r24	; 39
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
 3c6:	ee e6       	ldi	r30, 0x6E	; 110
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	80 83       	st	Z, r24
 3d0:	08 95       	ret

000003d2 <__vector_14>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER0_COMPA_vect)
{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
	ms++;
 3e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3e8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3ec:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
 3f0:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	a1 1d       	adc	r26, r1
 3f8:	b1 1d       	adc	r27, r1
 3fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3fe:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 402:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 406:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
}
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 41c:	f8 94       	cli
	uint32_t ret = ms;
 41e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__data_end>
 422:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <__data_end+0x1>
 426:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x2>
 42a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x3>
	sei();
 42e:	78 94       	sei
	return ret;
 430:	08 95       	ret

00000432 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 432:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 43c:	08 95       	ret

0000043e <i2c_start>:
 43e:	94 ea       	ldi	r25, 0xA4	; 164
 440:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 444:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 448:	99 23       	and	r25, r25
 44a:	e4 f7       	brge	.-8      	; 0x444 <i2c_start+0x6>
 44c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 450:	98 7f       	andi	r25, 0xF8	; 248
 452:	98 30       	cpi	r25, 0x08	; 8
 454:	11 f0       	breq	.+4      	; 0x45a <i2c_start+0x1c>
 456:	90 31       	cpi	r25, 0x10	; 16
 458:	91 f4       	brne	.+36     	; 0x47e <i2c_start+0x40>
 45a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 45e:	84 e8       	ldi	r24, 0x84	; 132
 460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 464:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 468:	88 23       	and	r24, r24
 46a:	e4 f7       	brge	.-8      	; 0x464 <i2c_start+0x26>
 46c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 470:	88 7f       	andi	r24, 0xF8	; 248
 472:	88 31       	cpi	r24, 0x18	; 24
 474:	31 f0       	breq	.+12     	; 0x482 <i2c_start+0x44>
 476:	80 34       	cpi	r24, 0x40	; 64
 478:	31 f4       	brne	.+12     	; 0x486 <i2c_start+0x48>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	08 95       	ret

0000048a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 48a:	84 e9       	ldi	r24, 0x94	; 148
 48c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 490:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 494:	84 fd       	sbrc	r24, 4
 496:	fc cf       	rjmp	.-8      	; 0x490 <i2c_stop+0x6>

}/* i2c_stop */
 498:	08 95       	ret

0000049a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 49a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 49e:	84 e8       	ldi	r24, 0x84	; 132
 4a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 4a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4a8:	88 23       	and	r24, r24
 4aa:	e4 f7       	brge	.-8      	; 0x4a4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 4ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4b0:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 4b2:	88 32       	cpi	r24, 0x28	; 40
 4b4:	11 f0       	breq	.+4      	; 0x4ba <i2c_write+0x20>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret
	return 0;
 4ba:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
