
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000b12  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800140  00800140  00000be6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e8a  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f21  00000000  00000000  00002d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c8  00000000  00000000  00003c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  00005144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d7  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d4e  00000000  00000000  00005f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00006ccd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3a       	cpi	r26, 0xA2	; 162
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  9e:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttonsInit>:
int lastSelectButtonPress = 0;
int lastScrollButtonPress = 0;

void buttonsInit() {
	//sets the pins so it are input pins
	DDRD &= ~(1<<scrollButton);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 7b       	andi	r24, 0xBF	; 191
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<selectResetButton);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//enables the pin interupts
	PCICR |= (1<<PCIE2);
  b2:	e8 e6       	ldi	r30, 0x68	; 104
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24
	//enables the exact pins for the interrupts
	PCMSK2 |= (1<<PCINT19) | (1<<PCINT22);
  bc:	ed e6       	ldi	r30, 0x6D	; 109
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 64       	ori	r24, 0x48	; 72
  c4:	80 83       	st	Z, r24
	
	//temp for testing because this is for pull up
	PORTD |= (1<<PORTD3) | (1<<PORTD6);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	88 64       	ori	r24, 0x48	; 72
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <__vector_5>:
}

ISR(PCINT2_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	if (((PIND & (1<<PIND3))==0) && (lastScrollButtonPress + 100 < millis())) {
  f8:	4b 99       	sbic	0x09, 3	; 9
  fa:	16 c0       	rjmp	.+44     	; 0x128 <__vector_5+0x5a>
  fc:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <__data_end>
 100:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <__data_end+0x1>
 104:	84 e6       	ldi	r24, 0x64	; 100
 106:	c8 0e       	add	r12, r24
 108:	d1 1c       	adc	r13, r1
 10a:	0d 2c       	mov	r0, r13
 10c:	00 0c       	add	r0, r0
 10e:	ee 08       	sbc	r14, r14
 110:	ff 08       	sbc	r15, r15
 112:	0e 94 ee 02 	call	0x5dc	; 0x5dc <millis>
 116:	c6 16       	cp	r12, r22
 118:	d7 06       	cpc	r13, r23
 11a:	e8 06       	cpc	r14, r24
 11c:	f9 06       	cpc	r15, r25
 11e:	20 f4       	brcc	.+8      	; 0x128 <__vector_5+0x5a>
		scrollButtonState = true;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <scrollButtonState>
 126:	19 c0       	rjmp	.+50     	; 0x15a <__vector_5+0x8c>
	} else if (((PIND & (1<<PIND6)) == 0) && (lastSelectButtonPress + 100 < millis())) {
 128:	4e 99       	sbic	0x09, 6	; 9
 12a:	17 c0       	rjmp	.+46     	; 0x15a <__vector_5+0x8c>
 12c:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <lastSelectButtonPress>
 130:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <lastSelectButtonPress+0x1>
 134:	84 e6       	ldi	r24, 0x64	; 100
 136:	c8 0e       	add	r12, r24
 138:	d1 1c       	adc	r13, r1
 13a:	0d 2c       	mov	r0, r13
 13c:	00 0c       	add	r0, r0
 13e:	ee 08       	sbc	r14, r14
 140:	ff 08       	sbc	r15, r15
 142:	0e 94 ee 02 	call	0x5dc	; 0x5dc <millis>
 146:	c6 16       	cp	r12, r22
 148:	d7 06       	cpc	r13, r23
 14a:	e8 06       	cpc	r14, r24
 14c:	f9 06       	cpc	r15, r25
 14e:	28 f4       	brcc	.+10     	; 0x15a <__vector_5+0x8c>
		selectResetButtonState = true;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <selectResetButtonState>
		PINB = (1<<PINB4);
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	83 b9       	out	0x03, r24	; 3
	}
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <scrollInMenu>:

bool scrollInMenu() {
	if (scrollButtonState == true) {
 184:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <scrollButtonState>
		scrollButtonState = false;
		lastScrollButtonPress = millis();
		} else {
		return false;  
	}
}
 188:	08 95       	ret

0000018a <selectMode>:

bool selectMode() {
	if (selectResetButtonState == 1) {
 18a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <selectResetButtonState>
		selectResetButtonState = 0;
		lastSelectButtonPress = millis();
		} else {
		return false;
	}
 18e:	08 95       	ret

00000190 <printModeScreen>:
	 lcd_backlight(1);
	 printWelcomeScreen();
}

void printModeScreen(enum Modes mode) {
	switch (mode) {
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	79 f0       	breq	.+30     	; 0x1b2 <printModeScreen+0x22>
 194:	18 f0       	brcs	.+6      	; 0x19c <printModeScreen+0xc>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b9 f0       	breq	.+46     	; 0x1c8 <printModeScreen+0x38>
 19a:	21 c0       	rjmp	.+66     	; 0x1de <printModeScreen+0x4e>
		case Slave:
		lcd_clrscr();
 19c:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Slave");
 1a8:	85 e1       	ldi	r24, 0x15	; 21
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 1b0:	08 95       	ret
		
		case Bluetooth:
		lcd_clrscr();
 1b2:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Bluetooth");
 1be:	8b e1       	ldi	r24, 0x1B	; 27
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 1c6:	08 95       	ret
		
		case Autonoom:
		lcd_clrscr();
 1c8:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Autonoom");
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 1dc:	08 95       	ret
		
		default:
		lcd_clrscr();
 1de:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1,1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("hoe kom jij hier");
 1ea:	8e e2       	ldi	r24, 0x2E	; 46
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
 1f2:	08 95       	ret

000001f4 <printMenuScreen>:
	}
}

void printMenuScreen(enum Modes mode) {
	switch (mode) {
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	79 f0       	breq	.+30     	; 0x216 <printMenuScreen+0x22>
 1f8:	18 f0       	brcs	.+6      	; 0x200 <printMenuScreen+0xc>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	b9 f0       	breq	.+46     	; 0x22c <printMenuScreen+0x38>
 1fe:	21 c0       	rjmp	.+66     	; 0x242 <printMenuScreen+0x4e>
		case Slave:
		lcd_clrscr();
 200:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Slave");
 20c:	85 e1       	ldi	r24, 0x15	; 21
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 214:	08 95       	ret
		
		case Bluetooth:
		lcd_clrscr();
 216:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Bluetooth");
 222:	8b e1       	ldi	r24, 0x1B	; 27
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 22a:	08 95       	ret
		
		case Autonoom:
		lcd_clrscr();
 22c:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("Autonoom");
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
		break;
 240:	08 95       	ret
		
		default:
		lcd_clrscr();
 242:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clrscr>
		lcd_gotoxy(1,1);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
		lcd_puts("hoe kom jij hier");
 24e:	8e e2       	ldi	r24, 0x2E	; 46
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_puts>
 256:	08 95       	ret

00000258 <I2C_WRITESEQ>:
}
// home the LCD
void lcd_home(void)
{
    wr_lcd_mode(0x02, 0);
    _lcd_x = _lcd_y = 0;
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	8b 01       	movw	r16, r22
 262:	d4 2f       	mov	r29, r20
 264:	88 0f       	add	r24, r24
 266:	0e 94 1f 05 	call	0xa3e	; 0xa3e <i2c_start>
 26a:	88 23       	and	r24, r24
 26c:	51 f0       	breq	.+20     	; 0x282 <I2C_WRITESEQ+0x2a>
 26e:	c1 e0       	ldi	r28, 0x01	; 1
 270:	0c c0       	rjmp	.+24     	; 0x28a <I2C_WRITESEQ+0x32>
 272:	f8 01       	movw	r30, r16
 274:	ec 0f       	add	r30, r28
 276:	f1 1d       	adc	r31, r1
 278:	80 81       	ld	r24, Z
 27a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <i2c_write>
 27e:	cf 5f       	subi	r28, 0xFF	; 255
 280:	01 c0       	rjmp	.+2      	; 0x284 <I2C_WRITESEQ+0x2c>
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	cd 17       	cp	r28, r29
 286:	a8 f3       	brcs	.-22     	; 0x272 <I2C_WRITESEQ+0x1a>
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	0e 94 45 05 	call	0xa8a	; 0xa8a <i2c_stop>
 28e:	8c 2f       	mov	r24, r28
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <wr_lcd_mode>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <wr_lcd_mode+0xa>
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <wr_lcd_mode+0xc>
 2a6:	1f 92       	push	r1
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	08 2f       	mov	r16, r24
 2ae:	68 30       	cpi	r22, 0x08	; 8
 2b0:	71 f4       	brne	.+28     	; 0x2ce <wr_lcd_mode+0x34>
 2b2:	88 23       	and	r24, r24
 2b4:	11 f0       	breq	.+4      	; 0x2ba <wr_lcd_mode+0x20>
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <wr_lcd_mode+0x22>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	87 e2       	ldi	r24, 0x27	; 39
 2c8:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_WRITESEQ>
 2cc:	26 c0       	rjmp	.+76     	; 0x31a <wr_lcd_mode+0x80>
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d2:	16 2f       	mov	r17, r22
 2d4:	18 2b       	or	r17, r24
 2d6:	19 83       	std	Y+1, r17	; 0x01
 2d8:	80 2f       	mov	r24, r16
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	81 2b       	or	r24, r17
 2de:	84 60       	ori	r24, 0x04	; 4
 2e0:	8a 83       	std	Y+2, r24	; 0x02
 2e2:	8b 7f       	andi	r24, 0xFB	; 251
 2e4:	8b 83       	std	Y+3, r24	; 0x03
 2e6:	20 e1       	ldi	r18, 0x10	; 16
 2e8:	02 9f       	mul	r16, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	81 2b       	or	r24, r17
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	8c 83       	std	Y+4, r24	; 0x04
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	8d 83       	std	Y+5, r24	; 0x05
 2f8:	45 e0       	ldi	r20, 0x05	; 5
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	87 e2       	ldi	r24, 0x27	; 39
 302:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_WRITESEQ>
 306:	10 fd       	sbrc	r17, 0
 308:	08 c0       	rjmp	.+16     	; 0x31a <wr_lcd_mode+0x80>
 30a:	03 30       	cpi	r16, 0x03	; 3
 30c:	30 f4       	brcc	.+12     	; 0x31a <wr_lcd_mode+0x80>
 30e:	e3 ef       	ldi	r30, 0xF3	; 243
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <wr_lcd_mode+0x78>
 316:	00 c0       	rjmp	.+0      	; 0x318 <wr_lcd_mode+0x7e>
 318:	00 00       	nop
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <lcd_gotoxy>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	d8 2f       	mov	r29, r24
 334:	c6 2f       	mov	r28, r22
 336:	e6 2f       	mov	r30, r22
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ef 5f       	subi	r30, 0xFF	; 255
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	80 81       	ld	r24, Z
 340:	8d 2b       	or	r24, r29
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	80 68       	ori	r24, 0x80	; 128
 346:	0e 94 4d 01 	call	0x29a	; 0x29a <wr_lcd_mode>
 34a:	d0 93 9c 01 	sts	0x019C, r29	; 0x80019c <_lcd_x>
 34e:	c0 93 9d 01 	sts	0x019D, r28	; 0x80019d <_lcd_y>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <lcd_clrscr>:
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 4d 01 	call	0x29a	; 0x29a <wr_lcd_mode>
 360:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_lcd_y>
 364:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <_lcd_x>
 368:	08 95       	ret

0000036a <lcd_putc>:
}
void lcd_putc(char c)
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
    if (_lcd_x>=_lcd_maxx || c == '\n')
 36e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_lcd_x>
 372:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_lcd_maxx>
 376:	98 17       	cp	r25, r24
 378:	10 f4       	brcc	.+4      	; 0x37e <lcd_putc+0x14>
 37a:	ca 30       	cpi	r28, 0x0A	; 10
 37c:	41 f4       	brne	.+16     	; 0x38e <lcd_putc+0x24>
    {
        lcd_gotoxy(0,++_lcd_y);
 37e:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <_lcd_y>
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <_lcd_y>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_gotoxy>
    }
    if (c != '\n') {
 38e:	ca 30       	cpi	r28, 0x0A	; 10
 390:	49 f0       	breq	.+18     	; 0x3a4 <lcd_putc+0x3a>
        ++_lcd_x;
 392:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_lcd_x>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_lcd_x>
        wr_lcd_mode(c, 1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 4d 01 	call	0x29a	; 0x29a <wr_lcd_mode>
    }
}
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <lcd_puts>:
// write the string str located in SRAM to the LCD
void lcd_puts(const char *str)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	ec 01       	movw	r28, r24
    while (*str) lcd_putc(*str++);
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <lcd_puts+0xe>
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_putc>
 3b6:	88 81       	ld	r24, Y
 3b8:	81 11       	cpse	r24, r1
 3ba:	fa cf       	rjmp	.-12     	; 0x3b0 <lcd_puts+0x8>
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <setup>:


void setup(void) {
	//init the different modules
	//lcdDisplayInit();
	millis_init();
 3c2:	0e 94 ae 02 	call	0x55c	; 0x55c <millis_init>
	buttonsInit();
 3c6:	0e 94 53 00 	call	0xa6	; 0xa6 <buttonsInit>
	remoteControlInit();
 3ca:	0e 94 9d 03 	call	0x73a	; 0x73a <remoteControlInit>
	motorInit();
 3ce:	0e 94 80 03 	call	0x700	; 0x700 <motorInit>
	slaveModeInit();
 3d2:	0e 94 bd 03 	call	0x77a	; 0x77a <slaveModeInit>

	//assings value to motor
	motor.speed = 0;
 3d6:	ef e9       	ldi	r30, 0x9F	; 159
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	11 82       	std	Z+1, r1	; 0x01
 3dc:	10 82       	st	Z, r1
	motor.direction = 'S';
 3de:	83 e5       	ldi	r24, 0x53	; 83
 3e0:	82 83       	std	Z+2, r24	; 0x02
	
	DDRB |= (1<<DDB4);
 3e2:	84 b1       	in	r24, 0x04	; 4
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	84 b9       	out	0x04, r24	; 4
 3e8:	08 95       	ret

000003ea <loop>:
}

void loop(void) {
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
	if (modeLock == 1) {
 3f2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <modeLock>
 3f6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <modeLock+0x1>
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	09 f5       	brne	.+66     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		switch (mode) {
 3fe:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <mode>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	a9 f0       	breq	.+42     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 406:	58 f0       	brcs	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	d1 f4       	brne	.+52     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			case Autonoom:
			motor.speed = 3000;
 40c:	ef e9       	ldi	r30, 0x9F	; 159
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	88 eb       	ldi	r24, 0xB8	; 184
 412:	9b e0       	ldi	r25, 0x0B	; 11
 414:	91 83       	std	Z+1, r25	; 0x01
 416:	80 83       	st	Z, r24
			motor.direction = 'F';
 418:	86 e4       	ldi	r24, 0x46	; 70
 41a:	82 83       	std	Z+2, r24	; 0x02
			break;
 41c:	11 c0       	rjmp	.+34     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			
			case Slave:
			motor = slaveMode();
 41e:	0e 94 c4 03 	call	0x788	; 0x788 <slaveMode>
 422:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <motor>
 426:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <motor+0x1>
 42a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
			
			break;
 42e:	08 c0       	rjmp	.+16     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			
			case Bluetooth:
			motor = remoteControl();
 430:	0e 94 a0 03 	call	0x740	; 0x740 <remoteControl>
 434:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <motor>
 438:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <motor+0x1>
 43c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
			break;	
		}
	}
	
	if (scrollInMenu() && (modeLock == 0)) {
 440:	0e 94 c2 00 	call	0x184	; 0x184 <scrollInMenu>
 444:	88 23       	and	r24, r24
 446:	11 f1       	breq	.+68     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 448:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <modeLock>
 44c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <modeLock+0x1>
 450:	89 2b       	or	r24, r25
 452:	e1 f4       	brne	.+56     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		if (firstPrint == 0) {
 454:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <firstPrint>
 458:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <firstPrint+0x1>
 45c:	89 2b       	or	r24, r25
 45e:	31 f4       	brne	.+12     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			firstPrint = 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <firstPrint+0x1>
 468:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <firstPrint>
		}
		
		if (mode < Autonoom) {
 46c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <mode>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	20 f4       	brcc	.+8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			mode++;
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <mode>
 47a:	08 c0       	rjmp	.+16     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			} else if (mode == Autonoom) {
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	19 f4       	brne	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			mode = Slave;
 480:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <mode>
 484:	03 c0       	rjmp	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			} else {
			mode = Stop;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <mode>
		}
	}
	
	if ((lastPrint + 1000 < millis()) && firstPrint) {
 48c:	c0 90 48 01 	lds	r12, 0x0148	; 0x800148 <lastPrint>
 490:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <lastPrint+0x1>
 494:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <lastPrint+0x2>
 498:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <lastPrint+0x3>
 49c:	88 ee       	ldi	r24, 0xE8	; 232
 49e:	c8 0e       	add	r12, r24
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	d8 1e       	adc	r13, r24
 4a4:	e1 1c       	adc	r14, r1
 4a6:	f1 1c       	adc	r15, r1
 4a8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <millis>
 4ac:	c6 16       	cp	r12, r22
 4ae:	d7 06       	cpc	r13, r23
 4b0:	e8 06       	cpc	r14, r24
 4b2:	f9 06       	cpc	r15, r25
 4b4:	20 f5       	brcc	.+72     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4b6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <firstPrint>
 4ba:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <firstPrint+0x1>
 4be:	89 2b       	or	r24, r25
 4c0:	f1 f0       	breq	.+60     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		lastPrint = millis();
 4c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <millis>
 4c6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lastPrint>
 4ca:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <lastPrint+0x1>
 4ce:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <lastPrint+0x2>
 4d2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <lastPrint+0x3>
		if (modeLock == 1) {
 4d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <modeLock>
 4da:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <modeLock+0x1>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	91 05       	cpc	r25, r1
 4e2:	31 f4       	brne	.+12     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			printModeScreen(mode);
 4e4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <mode>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 c8 00 	call	0x190	; 0x190 <printModeScreen>
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		} else if (modeLock == 0) {
 4f0:	89 2b       	or	r24, r25
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
			printMenuScreen(mode);
 4f4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <mode>
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <printMenuScreen>
		}
	}
	
	
	 if (selectMode()) {
 4fe:	0e 94 c5 00 	call	0x18a	; 0x18a <selectMode>
 502:	88 23       	and	r24, r24
 504:	c1 f0       	breq	.+48     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
		 if (modeLock == 1) {
 506:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <modeLock>
 50a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <modeLock+0x1>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	91 05       	cpc	r25, r1
 512:	49 f4       	brne	.+18     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			 modeLock = 0;
 514:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <modeLock+0x1>
 518:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <modeLock>
			 motor.speed = 0;
 51c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <motor+0x1>
 520:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <motor>
 524:	08 c0       	rjmp	.+16     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
		 } else if (modeLock == 0) {
 526:	89 2b       	or	r24, r25
 528:	31 f4       	brne	.+12     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
			 modeLock = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <modeLock+0x1>
 532:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <modeLock>
		} 
	 }
	
	motorFunctie(motor.speed, motor.direction);
 536:	ef e9       	ldi	r30, 0x9F	; 159
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	62 81       	ldd	r22, Z+2	; 0x02
 53c:	80 81       	ld	r24, Z
 53e:	91 81       	ldd	r25, Z+1	; 0x01
 540:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motorFunctie>
}
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	cf 90       	pop	r12
 54c:	08 95       	ret

0000054e <main>:

int main(void)
{
	setup();
 54e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <setup>
	

	while (1) {
		loop();
 552:	0e 94 f5 01 	call	0x3ea	; 0x3ea <loop>
		scrollInMenu();
 556:	0e 94 c2 00 	call	0x184	; 0x184 <scrollInMenu>
 55a:	fb cf       	rjmp	.-10     	; 0x552 <main+0x4>

0000055c <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 55c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ms>
 560:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ms+0x1>
 564:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <ms+0x2>
 568:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <ms+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR2A |= (1<<WGM01);
 56c:	e0 eb       	ldi	r30, 0xB0	; 176
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	82 60       	ori	r24, 0x02	; 2
 574:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS01) | (1<<CS00);
 576:	e1 eb       	ldi	r30, 0xB1	; 177
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	83 60       	ori	r24, 0x03	; 3
 57e:	80 83       	st	Z, r24
	OCR2A = 249;
 580:	89 ef       	ldi	r24, 0xF9	; 249
 582:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK2 |= (1<<OCIE0A);
 586:	e0 e7       	ldi	r30, 0x70	; 112
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	80 83       	st	Z, r24
 590:	08 95       	ret

00000592 <__vector_7>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER2_COMPA_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
	ms++;
 5a4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ms>
 5a8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <ms+0x1>
 5ac:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <ms+0x2>
 5b0:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <ms+0x3>
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	a1 1d       	adc	r26, r1
 5b8:	b1 1d       	adc	r27, r1
 5ba:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <ms>
 5be:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <ms+0x1>
 5c2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <ms+0x2>
 5c6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <ms+0x3>
}
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 5dc:	f8 94       	cli
	uint32_t ret = ms;
 5de:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <ms>
 5e2:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <ms+0x1>
 5e6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ms+0x2>
 5ea:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <ms+0x3>
	sei();
 5ee:	78 94       	sei
	return ret;
 5f0:	08 95       	ret

000005f2 <motorFunctie>:


#define blinkerLeft DDD4
#define BlinkerRight DDD5

void motorFunctie(int speed, char dir) {
 5f2:	9c 01       	movw	r18, r24
	switch (dir) {
 5f4:	6c 34       	cpi	r22, 0x4C	; 76
 5f6:	09 f4       	brne	.+2      	; 0x5fa <motorFunctie+0x8>
 5f8:	64 c0       	rjmp	.+200    	; 0x6c2 <motorFunctie+0xd0>
 5fa:	28 f4       	brcc	.+10     	; 0x606 <motorFunctie+0x14>
 5fc:	62 34       	cpi	r22, 0x42	; 66
 5fe:	d9 f0       	breq	.+54     	; 0x636 <motorFunctie+0x44>
 600:	66 34       	cpi	r22, 0x46	; 70
 602:	51 f0       	breq	.+20     	; 0x618 <motorFunctie+0x26>
 604:	6c c0       	rjmp	.+216    	; 0x6de <motorFunctie+0xec>
 606:	6c 36       	cpi	r22, 0x6C	; 108
 608:	09 f4       	brne	.+2      	; 0x60c <motorFunctie+0x1a>
 60a:	47 c0       	rjmp	.+142    	; 0x69a <motorFunctie+0xa8>
 60c:	62 37       	cpi	r22, 0x72	; 114
 60e:	11 f1       	breq	.+68     	; 0x654 <motorFunctie+0x62>
 610:	62 35       	cpi	r22, 0x52	; 82
 612:	09 f0       	breq	.+2      	; 0x616 <motorFunctie+0x24>
 614:	64 c0       	rjmp	.+200    	; 0x6de <motorFunctie+0xec>
 616:	32 c0       	rjmp	.+100    	; 0x67c <motorFunctie+0x8a>
		
		//forwards
		case 'F':
		//set both motors in forward mode
		PORTB |= (1<<DDB0);
 618:	85 b1       	in	r24, 0x05	; 5
 61a:	81 60       	ori	r24, 0x01	; 1
 61c:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<DDD7);
 61e:	8b b1       	in	r24, 0x0b	; 11
 620:	80 68       	ori	r24, 0x80	; 128
 622:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed;
 624:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 628:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
 62c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 630:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 634:	08 95       	ret
		
		
		//backwards
		case 'B':
		//set both motors in backwards mode
		PORTB &= ~(1<<DDB0);
 636:	85 b1       	in	r24, 0x05	; 5
 638:	8e 7f       	andi	r24, 0xFE	; 254
 63a:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1<<DDD7);
 63c:	8b b1       	in	r24, 0x0b	; 11
 63e:	8f 77       	andi	r24, 0x7F	; 127
 640:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed;
 642:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 646:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
 64a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 64e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 652:	08 95       	ret
		
		
		//makes the car make a corner too the right
		case 'r':
		//set both motors in forward mode
		PORTB |= (1<<DDB0);
 654:	85 b1       	in	r24, 0x05	; 5
 656:	81 60       	ori	r24, 0x01	; 1
 658:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<DDD7);
 65a:	8b b1       	in	r24, 0x0b	; 11
 65c:	80 68       	ori	r24, 0x80	; 128
 65e:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed;
 660:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 664:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed/3;
 668:	c9 01       	movw	r24, r18
 66a:	63 e0       	ldi	r22, 0x03	; 3
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 672:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 676:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 67a:	08 95       	ret
		
		
		//makes the car turn around its axis too the right
		case 'R':
		//sets the motors on the rigt too backwards and the motors on the left too forward
		PORTB |= (1<<DDB0);
 67c:	85 b1       	in	r24, 0x05	; 5
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1<<DDD7);
 682:	8b b1       	in	r24, 0x0b	; 11
 684:	8f 77       	andi	r24, 0x7F	; 127
 686:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed;
 688:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 68c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
 690:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 694:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 698:	08 95       	ret
		
		
		//makes the car make a corner too the left
		case 'l':
		//set both motors in forward mode
		PORTB |= (1<<DDB0);
 69a:	85 b1       	in	r24, 0x05	; 5
 69c:	81 60       	ori	r24, 0x01	; 1
 69e:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<DDD7);
 6a0:	8b b1       	in	r24, 0x0b	; 11
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed/3;
 6a6:	c9 01       	movw	r24, r18
 6a8:	63 e0       	ldi	r22, 0x03	; 3
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 6b0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6b4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
 6b8:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6bc:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 6c0:	08 95       	ret
		
		
		//makes the car turn around its axis too the right
		case 'L':
		//sets the motors on the rigt too backwards and the motors on the left too forward
		PORTB = ~(1<<DDB0);
 6c2:	8e ef       	ldi	r24, 0xFE	; 254
 6c4:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<DDD7);
 6c6:	8b b1       	in	r24, 0x0b	; 11
 6c8:	80 68       	ori	r24, 0x80	; 128
 6ca:	8b b9       	out	0x0b, r24	; 11
		
		//sets the motor speed
		OCR1A = speed;
 6cc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6d0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = speed;
 6d4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6d8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 6dc:	08 95       	ret
		
		
		//the default makes the car stop
		default:
		//sets the pins too low
		PORTB &= ~(1<<DDB1);
 6de:	85 b1       	in	r24, 0x05	; 5
 6e0:	8d 7f       	andi	r24, 0xFD	; 253
 6e2:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<DDB2);
 6e4:	85 b1       	in	r24, 0x05	; 5
 6e6:	8b 7f       	andi	r24, 0xFB	; 251
 6e8:	85 b9       	out	0x05, r24	; 5
		//sets the compare too high so it won't set the pins too high
		OCR1A = 10000;
 6ea:	80 e1       	ldi	r24, 0x10	; 16
 6ec:	97 e2       	ldi	r25, 0x27	; 39
 6ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 10000;
 6f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 6fe:	08 95       	ret

00000700 <motorInit>:
	}
} 

void motorInit(void) {
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
 700:	84 b1       	in	r24, 0x04	; 4
 702:	87 60       	ori	r24, 0x07	; 7
 704:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD7);
 706:	8a b1       	in	r24, 0x0a	; 10
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	8a b9       	out	0x0a, r24	; 10
	// - CS1[2:0] = 011 : 64 prescaler
	//
	// TOP = (F_CPU / (F_PWM * N)) - 1
	// = (16MHz / (50Hz * 64)) - 1
	// = 4999
	TCCR1A |= (1<<WGM11);
 70c:	e0 e8       	ldi	r30, 0x80	; 128
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	82 60       	ori	r24, 0x02	; 2
 714:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
 716:	a1 e8       	ldi	r26, 0x81	; 129
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	8c 91       	ld	r24, X
 71c:	8b 61       	ori	r24, 0x1B	; 27
 71e:	8c 93       	st	X, r24
	ICR1 = 4999;
 720:	87 e8       	ldi	r24, 0x87	; 135
 722:	93 e1       	ldi	r25, 0x13	; 19
 724:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 728:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// The mode is fast-PWM
	// COM1A[1:0] = 10 : Clear OC1A/OC1B on compare match, set OC1A/OC1B at
	// BOTTOM (non-inverting mode)
	// COM1B[1:0] = 11 : Set OC1A/OC1B on compare match, clear OC1A/OC1B at
	// BOTTOM (non-inverting mode)
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
 72c:	80 81       	ld	r24, Z
 72e:	80 6f       	ori	r24, 0xF0	; 240
 730:	80 83       	st	Z, r24
	
	//sets the pins for the blinker left and right too outout
	DDRD |= (1<<blinkerLeft) | (1<<BlinkerRight);
 732:	8a b1       	in	r24, 0x0a	; 10
 734:	80 63       	ori	r24, 0x30	; 48
 736:	8a b9       	out	0x0a, r24	; 10
 738:	08 95       	ret

0000073a <remoteControlInit>:
	int speed;
	char direction;
};

void remoteControlInit(void) {
	SoftSerialInit();
 73a:	0e 94 c6 04 	call	0x98c	; 0x98c <SoftSerialInit>
 73e:	08 95       	ret

00000740 <remoteControl>:
}

struct motorSettings remoteControl(void)
{
 740:	1f 93       	push	r17
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
	sei();
 746:	78 94       	sei
	//make a stucture variable of structure motorSettings
	struct motorSettings motor;
		
	if(SoftSerialUnread() > 0)
 748:	0e 94 04 05 	call	0xa08	; 0xa08 <SoftSerialUnread>
 74c:	88 23       	and	r24, r24
 74e:	71 f0       	breq	.+28     	; 0x76c <remoteControl+0x2c>
	{
		char data = SoftSerialReceiveByte();
 750:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SoftSerialReceiveByte>
			
		switch( data )
 754:	86 34       	cpi	r24, 0x46	; 70
 756:	19 f0       	breq	.+6      	; 0x75e <remoteControl+0x1e>
 758:	83 35       	cpi	r24, 0x53	; 83
 75a:	29 f0       	breq	.+10     	; 0x766 <remoteControl+0x26>
 75c:	07 c0       	rjmp	.+14     	; 0x76c <remoteControl+0x2c>
		{

			case 'F':
				motor.direction = 'F';
 75e:	c6 e4       	ldi	r28, 0x46	; 70
				motor.speed = 2500;
 760:	14 ec       	ldi	r17, 0xC4	; 196
 762:	d9 e0       	ldi	r29, 0x09	; 9
			break;
 764:	03 c0       	rjmp	.+6      	; 0x76c <remoteControl+0x2c>
			
			case 'S':
				motor.direction = 'S';
 766:	c3 e5       	ldi	r28, 0x53	; 83
				motor.speed = 0;
 768:	10 e0       	ldi	r17, 0x00	; 0
 76a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
			
		}
	}
	return motor;
}
 76c:	61 2f       	mov	r22, r17
 76e:	7d 2f       	mov	r23, r29
 770:	8c 2f       	mov	r24, r28
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	08 95       	ret

0000077a <slaveModeInit>:
struct motorSettings motor;

void slaveModeInit(void) 
{

	DDRC &= ~((1 << sensorOne) | (1 << sensorTwo) | (1 << sensorThree) | (1 << sensorFour)); // Set PC0-PC3 as input
 77a:	87 b1       	in	r24, 0x07	; 7
 77c:	80 7f       	andi	r24, 0xF0	; 240
 77e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << sensorOne) | (1 << sensorTwo) | (1 << sensorThree) | (1 << sensorFour); // Enable pull-up resistors                                    
 780:	88 b1       	in	r24, 0x08	; 8
 782:	8f 60       	ori	r24, 0x0F	; 15
 784:	88 b9       	out	0x08, r24	; 8
 786:	08 95       	ret

00000788 <slaveMode>:
}


struct motorSettings slaveMode(void) {
	
		motor.speed = 3000;
 788:	88 eb       	ldi	r24, 0xB8	; 184
 78a:	9b e0       	ldi	r25, 0x0B	; 11
 78c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <motor+0x1>
 790:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <motor>
		if(!(PINC & ((1 << sensorOne) | (1 << sensorTwo) | (1 << sensorThree) | (1 << sensorFour))))
 794:	86 b1       	in	r24, 0x06	; 6
 796:	8f 70       	andi	r24, 0x0F	; 15
 798:	21 f4       	brne	.+8      	; 0x7a2 <slaveMode+0x1a>
		{
			//vooruit
			motor.direction = 'F';
 79a:	86 e4       	ldi	r24, 0x46	; 70
 79c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
 7a0:	23 c0       	rjmp	.+70     	; 0x7e8 <slaveMode+0x60>
			
		}
		
		else if(((PINC & (1 << sensorOne)) || (PINC & (1 << sensorTwo))) && !(PINC & (1 << sensorThree)) && !(PINC & (1 << sensorFour)))
 7a2:	30 99       	sbic	0x06, 0	; 6
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <slaveMode+0x22>
 7a6:	31 9b       	sbis	0x06, 1	; 6
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <slaveMode+0x32>
 7aa:	32 99       	sbic	0x06, 2	; 6
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <slaveMode+0x32>
 7ae:	33 99       	sbic	0x06, 3	; 6
 7b0:	04 c0       	rjmp	.+8      	; 0x7ba <slaveMode+0x32>
		{
			//rects
			motor.direction = 'R';
 7b2:	82 e5       	ldi	r24, 0x52	; 82
 7b4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
 7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <slaveMode+0x60>
		}
		
		else if(!(PINC & (1 << sensorOne)) && !(PINC & (1 << sensorTwo)) && ((PINC & (1 << sensorThree)) || (PINC & (1 << sensorFour))))
 7ba:	30 99       	sbic	0x06, 0	; 6
 7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <slaveMode+0x4a>
 7be:	31 99       	sbic	0x06, 1	; 6
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <slaveMode+0x4a>
 7c2:	32 99       	sbic	0x06, 2	; 6
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <slaveMode+0x42>
 7c6:	33 9b       	sbis	0x06, 3	; 6
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <slaveMode+0x4a>
		{
			// links
			motor.direction = 'L';
 7ca:	8c e4       	ldi	r24, 0x4C	; 76
 7cc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
 7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <slaveMode+0x60>
		}
		else if((PINC & (1 << sensorOne)) && (PINC & (1 << sensorTwo)) && (PINC & (1 << sensorThree)) && (PINC & (1 << sensorFour)))
 7d2:	30 9b       	sbis	0x06, 0	; 6
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <slaveMode+0x60>
 7d6:	31 9b       	sbis	0x06, 1	; 6
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <slaveMode+0x60>
 7da:	32 9b       	sbis	0x06, 2	; 6
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <slaveMode+0x60>
 7de:	33 9b       	sbis	0x06, 3	; 6
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <slaveMode+0x60>
		{
			// vooruit
			motor.direction = 'F';
 7e2:	86 e4       	ldi	r24, 0x46	; 70
 7e4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <motor+0x2>
		}
	return  motor;
 7e8:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <motor>
 7ec:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <motor+0x1>
 7f0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <motor+0x2>
}
 7f4:	08 95       	ret

000007f6 <__vector_1>:
{
    while(*str)
    {
        SoftSerialTransmitByte(*str++);
    }
}
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	8f 93       	push	r24
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
 806:	83 e0       	ldi	r24, 0x03	; 3
 808:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <state>
 80c:	8d b3       	in	r24, 0x1d	; 29
 80e:	8e 7f       	andi	r24, 0xFE	; 254
 810:	8d bb       	out	0x1d, r24	; 29
 812:	ee e6       	ldi	r30, 0x6E	; 110
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	8d 7f       	andi	r24, 0xFD	; 253
 81a:	80 83       	st	Z, r24
 81c:	85 b5       	in	r24, 0x25	; 37
 81e:	8c 7f       	andi	r24, 0xFC	; 252
 820:	85 bd       	out	0x25, r24	; 37
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	86 bd       	out	0x26, r24	; 38
 826:	87 e2       	ldi	r24, 0x27	; 39
 828:	87 bd       	out	0x27, r24	; 39
 82a:	85 b5       	in	r24, 0x25	; 37
 82c:	83 60       	ori	r24, 0x03	; 3
 82e:	85 bd       	out	0x25, r24	; 37
 830:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <SoftSerialRXBitCount>
 834:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SoftSerialRXBits>
 838:	85 b3       	in	r24, 0x15	; 21
 83a:	82 60       	ori	r24, 0x02	; 2
 83c:	85 bb       	out	0x15, r24	; 21
 83e:	80 81       	ld	r24, Z
 840:	82 60       	ori	r24, 0x02	; 2
 842:	80 83       	st	Z, r24
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	8f 91       	pop	r24
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <__vector_14>:
 854:	1f 92       	push	r1
 856:	0f 92       	push	r0
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	0f 92       	push	r0
 85c:	11 24       	eor	r1, r1
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
 866:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <state>
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	39 f1       	breq	.+78     	; 0x8bc <__vector_14+0x68>
 86e:	83 30       	cpi	r24, 0x03	; 3
 870:	09 f4       	brne	.+2      	; 0x874 <__vector_14+0x20>
 872:	4d c0       	rjmp	.+154    	; 0x90e <__stack+0xf>
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	09 f0       	breq	.+2      	; 0x87a <__vector_14+0x26>
 878:	7e c0       	rjmp	.+252    	; 0x976 <__stack+0x77>
 87a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SoftSerialTXBitCount>
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	b0 f4       	brcc	.+44     	; 0x8ae <__vector_14+0x5a>
 882:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SoftSerialTXBits>
 886:	80 ff       	sbrs	r24, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__vector_14+0x3e>
 88a:	8b b1       	in	r24, 0x0b	; 11
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	8b b9       	out	0x0b, r24	; 11
 890:	03 c0       	rjmp	.+6      	; 0x898 <__vector_14+0x44>
 892:	8b b1       	in	r24, 0x0b	; 11
 894:	8d 7f       	andi	r24, 0xFD	; 253
 896:	8b b9       	out	0x0b, r24	; 11
 898:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SoftSerialTXBits>
 89c:	86 95       	lsr	r24
 89e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SoftSerialTXBits>
 8a2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SoftSerialTXBitCount>
 8a6:	8f 5f       	subi	r24, 0xFF	; 255
 8a8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SoftSerialTXBitCount>
 8ac:	66 c0       	rjmp	.+204    	; 0x97a <__stack+0x7b>
 8ae:	8b b1       	in	r24, 0x0b	; 11
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	8b b9       	out	0x0b, r24	; 11
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <state>
 8ba:	5f c0       	rjmp	.+190    	; 0x97a <__stack+0x7b>
 8bc:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <SoftSerial_TxHead>
 8c0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <SoftSerial_TxTail>
 8c4:	98 17       	cp	r25, r24
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__vector_14+0x9e>
 8c8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <SoftSerial_TxTail>
 8cc:	ef 5f       	subi	r30, 0xFF	; 255
 8ce:	ef 71       	andi	r30, 0x1F	; 31
 8d0:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <SoftSerial_TxTail>
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <state>
 8da:	8b b1       	in	r24, 0x0b	; 11
 8dc:	8d 7f       	andi	r24, 0xFD	; 253
 8de:	8b b9       	out	0x0b, r24	; 11
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	e7 5a       	subi	r30, 0xA7	; 167
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	80 81       	ld	r24, Z
 8e8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SoftSerialTXBits>
 8ec:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <SoftSerialTXBitCount>
 8f0:	44 c0       	rjmp	.+136    	; 0x97a <__stack+0x7b>
 8f2:	ee e6       	ldi	r30, 0x6E	; 110
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	8d 7f       	andi	r24, 0xFD	; 253
 8fa:	80 83       	st	Z, r24
 8fc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <state>
 900:	8c b3       	in	r24, 0x1c	; 28
 902:	81 60       	ori	r24, 0x01	; 1
 904:	8c bb       	out	0x1c, r24	; 28
 906:	8d b3       	in	r24, 0x1d	; 29
 908:	81 60       	ori	r24, 0x01	; 1
 90a:	8d bb       	out	0x1d, r24	; 29
 90c:	36 c0       	rjmp	.+108    	; 0x97a <__stack+0x7b>
 90e:	89 e1       	ldi	r24, 0x19	; 25
 910:	87 bd       	out	0x27, r24	; 39
 912:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SoftSerialRXBitCount>
 916:	88 30       	cpi	r24, 0x08	; 8
 918:	90 f4       	brcc	.+36     	; 0x93e <__stack+0x3f>
 91a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SoftSerialRXBitCount>
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SoftSerialRXBitCount>
 924:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SoftSerialRXBits>
 928:	86 95       	lsr	r24
 92a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SoftSerialRXBits>
 92e:	4a 9b       	sbis	0x09, 2	; 9
 930:	24 c0       	rjmp	.+72     	; 0x97a <__stack+0x7b>
 932:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SoftSerialRXBits>
 936:	80 68       	ori	r24, 0x80	; 128
 938:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SoftSerialRXBits>
 93c:	1e c0       	rjmp	.+60     	; 0x97a <__stack+0x7b>
 93e:	ee e6       	ldi	r30, 0x6E	; 110
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	8d 7f       	andi	r24, 0xFD	; 253
 946:	80 83       	st	Z, r24
 948:	8c b3       	in	r24, 0x1c	; 28
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	8c bb       	out	0x1c, r24	; 28
 94e:	8d b3       	in	r24, 0x1d	; 29
 950:	81 60       	ori	r24, 0x01	; 1
 952:	8d bb       	out	0x1d, r24	; 29
 954:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <SoftSerial_RxHead>
 958:	ef 5f       	subi	r30, 0xFF	; 255
 95a:	ef 71       	andi	r30, 0x1F	; 31
 95c:	e0 93 7a 01 	sts	0x017A, r30	; 0x80017a <SoftSerial_RxHead>
 960:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SoftSerial_RxTail>
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SoftSerialRXBits>
 96a:	e5 58       	subi	r30, 0x85	; 133
 96c:	fe 4f       	sbci	r31, 0xFE	; 254
 96e:	80 83       	st	Z, r24
 970:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <state>
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
 976:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <state>
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	9f 91       	pop	r25
 980:	8f 91       	pop	r24
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <SoftSerialInit>:
 98c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <SoftSerial_RxTail>
 990:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <SoftSerial_RxHead>
 994:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <SoftSerial_TxTail>
 998:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <SoftSerial_TxHead>
 99c:	8a b1       	in	r24, 0x0a	; 10
 99e:	8b 7f       	andi	r24, 0xFB	; 251
 9a0:	8a b9       	out	0x0a, r24	; 10
 9a2:	8b b1       	in	r24, 0x0b	; 11
 9a4:	84 60       	ori	r24, 0x04	; 4
 9a6:	8b b9       	out	0x0b, r24	; 11
 9a8:	8a b1       	in	r24, 0x0a	; 10
 9aa:	82 60       	ori	r24, 0x02	; 2
 9ac:	8a b9       	out	0x0a, r24	; 10
 9ae:	8b b1       	in	r24, 0x0b	; 11
 9b0:	82 60       	ori	r24, 0x02	; 2
 9b2:	8b b9       	out	0x0b, r24	; 11
 9b4:	ee e6       	ldi	r30, 0x6E	; 110
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	8d 7f       	andi	r24, 0xFD	; 253
 9bc:	80 83       	st	Z, r24
 9be:	84 b5       	in	r24, 0x24	; 36
 9c0:	82 60       	ori	r24, 0x02	; 2
 9c2:	84 bd       	out	0x24, r24	; 36
 9c4:	85 b5       	in	r24, 0x25	; 37
 9c6:	83 60       	ori	r24, 0x03	; 3
 9c8:	85 bd       	out	0x25, r24	; 37
 9ca:	e9 e6       	ldi	r30, 0x69	; 105
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	82 60       	ori	r24, 0x02	; 2
 9d2:	80 83       	st	Z, r24
 9d4:	8c b3       	in	r24, 0x1c	; 28
 9d6:	81 60       	ori	r24, 0x01	; 1
 9d8:	8c bb       	out	0x1c, r24	; 28
 9da:	8d b3       	in	r24, 0x1d	; 29
 9dc:	81 60       	ori	r24, 0x01	; 1
 9de:	8d bb       	out	0x1d, r24	; 29
 9e0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <state>
 9e4:	08 95       	ret

000009e6 <SoftSerialReceiveByte>:
 9e6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <SoftSerial_RxHead>
 9ea:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SoftSerial_RxTail>
 9ee:	98 17       	cp	r25, r24
 9f0:	d1 f3       	breq	.-12     	; 0x9e6 <SoftSerialReceiveByte>
 9f2:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <SoftSerial_RxTail>
 9f6:	ef 5f       	subi	r30, 0xFF	; 255
 9f8:	ef 71       	andi	r30, 0x1F	; 31
 9fa:	e0 93 79 01 	sts	0x0179, r30	; 0x800179 <SoftSerial_RxTail>
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	e5 58       	subi	r30, 0x85	; 133
 a02:	fe 4f       	sbci	r31, 0xFE	; 254
 a04:	80 81       	ld	r24, Z
 a06:	08 95       	ret

00000a08 <SoftSerialUnread>:
/*
 * This function returns the number of unread bytes in the receive buffer.
 */
unsigned char SoftSerialUnread(void)
{
    if(SoftSerial_RxHead == SoftSerial_RxTail)
 a08:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <SoftSerial_RxHead>
 a0c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SoftSerial_RxTail>
 a10:	98 17       	cp	r25, r24
 a12:	99 f0       	breq	.+38     	; 0xa3a <SoftSerialUnread+0x32>
        return 0;
    else if(SoftSerial_RxHead > SoftSerial_RxTail)
 a14:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <SoftSerial_RxHead>
 a18:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SoftSerial_RxTail>
 a1c:	89 17       	cp	r24, r25
 a1e:	30 f4       	brcc	.+12     	; 0xa2c <SoftSerialUnread+0x24>
        return SoftSerial_RxHead - SoftSerial_RxTail;
 a20:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <SoftSerial_RxHead>
 a24:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <SoftSerial_RxTail>
 a28:	89 1b       	sub	r24, r25
 a2a:	08 95       	ret
    else
        return SOFTSERIAL_RX_BUFFER_SIZE - SoftSerial_RxTail + SoftSerial_RxHead;
 a2c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <SoftSerial_RxHead>
 a30:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <SoftSerial_RxTail>
 a34:	89 1b       	sub	r24, r25
 a36:	80 5e       	subi	r24, 0xE0	; 224
 a38:	08 95       	ret
 * This function returns the number of unread bytes in the receive buffer.
 */
unsigned char SoftSerialUnread(void)
{
    if(SoftSerial_RxHead == SoftSerial_RxTail)
        return 0;
 a3a:	80 e0       	ldi	r24, 0x00	; 0
    else if(SoftSerial_RxHead > SoftSerial_RxTail)
        return SoftSerial_RxHead - SoftSerial_RxTail;
    else
        return SOFTSERIAL_RX_BUFFER_SIZE - SoftSerial_RxTail + SoftSerial_RxHead;
 a3c:	08 95       	ret

00000a3e <i2c_start>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 a3e:	94 ea       	ldi	r25, 0xA4	; 164
 a40:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a44:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a48:	99 23       	and	r25, r25
 a4a:	e4 f7       	brge	.-8      	; 0xa44 <i2c_start+0x6>
 a4c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a50:	98 7f       	andi	r25, 0xF8	; 248
 a52:	98 30       	cpi	r25, 0x08	; 8
 a54:	11 f0       	breq	.+4      	; 0xa5a <i2c_start+0x1c>
 a56:	90 31       	cpi	r25, 0x10	; 16
 a58:	91 f4       	brne	.+36     	; 0xa7e <i2c_start+0x40>
 a5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 a5e:	84 e8       	ldi	r24, 0x84	; 132
 a60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a68:	88 23       	and	r24, r24
 a6a:	e4 f7       	brge	.-8      	; 0xa64 <i2c_start+0x26>
 a6c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a70:	88 7f       	andi	r24, 0xF8	; 248
 a72:	88 31       	cpi	r24, 0x18	; 24
 a74:	31 f0       	breq	.+12     	; 0xa82 <i2c_start+0x44>
 a76:	80 34       	cpi	r24, 0x40	; 64
 a78:	31 f4       	brne	.+12     	; 0xa86 <i2c_start+0x48>
 a7a:	80 e0       	ldi	r24, 0x00	; 0
 a7c:	08 95       	ret
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	08 95       	ret
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	08 95       	ret
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	08 95       	ret

00000a8a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 a8a:	84 e9       	ldi	r24, 0x94	; 148
 a8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 a90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a94:	84 fd       	sbrc	r24, 4
 a96:	fc cf       	rjmp	.-8      	; 0xa90 <i2c_stop+0x6>

}/* i2c_stop */
 a98:	08 95       	ret

00000a9a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 a9a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 a9e:	84 e8       	ldi	r24, 0x84	; 132
 aa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 aa4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 aa8:	88 23       	and	r24, r24
 aaa:	e4 f7       	brge	.-8      	; 0xaa4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 aac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 ab0:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 ab2:	88 32       	cpi	r24, 0x28	; 40
 ab4:	11 f0       	breq	.+4      	; 0xaba <i2c_write+0x20>
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	08 95       	ret
	return 0;
 aba:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 abc:	08 95       	ret

00000abe <__divmodhi4>:
 abe:	97 fb       	bst	r25, 7
 ac0:	07 2e       	mov	r0, r23
 ac2:	16 f4       	brtc	.+4      	; 0xac8 <__divmodhi4+0xa>
 ac4:	00 94       	com	r0
 ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodhi4_neg1>
 ac8:	77 fd       	sbrc	r23, 7
 aca:	09 d0       	rcall	.+18     	; 0xade <__divmodhi4_neg2>
 acc:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodhi4>
 ad0:	07 fc       	sbrc	r0, 7
 ad2:	05 d0       	rcall	.+10     	; 0xade <__divmodhi4_neg2>
 ad4:	3e f4       	brtc	.+14     	; 0xae4 <__divmodhi4_exit>

00000ad6 <__divmodhi4_neg1>:
 ad6:	90 95       	com	r25
 ad8:	81 95       	neg	r24
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <__divmodhi4_neg2>:
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae4 <__divmodhi4_exit>:
 ae4:	08 95       	ret

00000ae6 <__udivmodhi4>:
 ae6:	aa 1b       	sub	r26, r26
 ae8:	bb 1b       	sub	r27, r27
 aea:	51 e1       	ldi	r21, 0x11	; 17
 aec:	07 c0       	rjmp	.+14     	; 0xafc <__udivmodhi4_ep>

00000aee <__udivmodhi4_loop>:
 aee:	aa 1f       	adc	r26, r26
 af0:	bb 1f       	adc	r27, r27
 af2:	a6 17       	cp	r26, r22
 af4:	b7 07       	cpc	r27, r23
 af6:	10 f0       	brcs	.+4      	; 0xafc <__udivmodhi4_ep>
 af8:	a6 1b       	sub	r26, r22
 afa:	b7 0b       	sbc	r27, r23

00000afc <__udivmodhi4_ep>:
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	5a 95       	dec	r21
 b02:	a9 f7       	brne	.-22     	; 0xaee <__udivmodhi4_loop>
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	bc 01       	movw	r22, r24
 b0a:	cd 01       	movw	r24, r26
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
