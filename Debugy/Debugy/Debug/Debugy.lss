
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000aee  00000b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800112  00800112  00000b94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f6  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8c  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a88  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ae  00000000  00000000  00003e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_14>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	54 65       	ori	r21, 0x54	; 84
  6a:	61 6d       	ori	r22, 0xD1	; 209
  6c:	20 41       	sbci	r18, 0x10	; 16
  6e:	6e 74       	andi	r22, 0x4E	; 78
  70:	69 6d       	ori	r22, 0xD9	; 217
  72:	6f 74       	andi	r22, 0x4F	; 79
  74:	69 76       	andi	r22, 0x69	; 105
  76:	65 00       	.word	0x0065	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ee ee       	ldi	r30, 0xEE	; 238
  8c:	fa e0       	ldi	r31, 0x0A	; 10
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a2 e1       	ldi	r26, 0x12	; 18
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a9 31       	cpi	r26, 0x19	; 25
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
  ae:	0c 94 75 05 	jmp	0xaea	; 0xaea <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <printWelcomeScreen>:


extern void lcd_backlight(char on);    //not in lcd.h

void printWelcomeScreen(void) {
	lcd_clrscr();
  b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clrscr>
	lcd_gotoxy(0, 0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>
	lcd_puts_P("Team Antimotive");
  c2:	88 e6       	ldi	r24, 0x68	; 104
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts_p>
	lcd_gotoxy(1, 1);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>
	lcd_puts("Debuggy");
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 22 01 	call	0x244	; 0x244 <lcd_puts>
  da:	08 95       	ret

000000dc <lcdDisplayInit>:
}

void lcdDisplayInit(void) {
	 lcd_init(LCD_ON_DISPLAY);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
	 lcd_backlight(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_backlight>
	 lcd_backlight(1);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_backlight>
	printWelcomeScreen();
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <printWelcomeScreen>
  f2:	08 95       	ret

000000f4 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8b 01       	movw	r16, r22
  fe:	d4 2f       	mov	r29, r20
 100:	88 0f       	add	r24, r24
 102:	0e 94 4b 02 	call	0x496	; 0x496 <i2c_start>
 106:	88 23       	and	r24, r24
 108:	51 f0       	breq	.+20     	; 0x11e <I2C_WRITESEQ+0x2a>
 10a:	c1 e0       	ldi	r28, 0x01	; 1
 10c:	0c c0       	rjmp	.+24     	; 0x126 <I2C_WRITESEQ+0x32>
 10e:	f8 01       	movw	r30, r16
 110:	ec 0f       	add	r30, r28
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	0e 94 79 02 	call	0x4f2	; 0x4f2 <i2c_write>
 11a:	cf 5f       	subi	r28, 0xFF	; 255
 11c:	01 c0       	rjmp	.+2      	; 0x120 <I2C_WRITESEQ+0x2c>
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	cd 17       	cp	r28, r29
 122:	a8 f3       	brcs	.-22     	; 0x10e <I2C_WRITESEQ+0x1a>
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_stop>
 12a:	8c 2f       	mov	r24, r28
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <wr_lcd_mode>:
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <wr_lcd_mode+0xa>
 140:	00 d0       	rcall	.+0      	; 0x142 <wr_lcd_mode+0xc>
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	08 2f       	mov	r16, r24
 14a:	68 30       	cpi	r22, 0x08	; 8
 14c:	71 f4       	brne	.+28     	; 0x16a <wr_lcd_mode+0x34>
 14e:	88 23       	and	r24, r24
 150:	11 f0       	breq	.+4      	; 0x156 <wr_lcd_mode+0x20>
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	01 c0       	rjmp	.+2      	; 0x158 <wr_lcd_mode+0x22>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	87 e2       	ldi	r24, 0x27	; 39
 164:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 168:	26 c0       	rjmp	.+76     	; 0x1b6 <wr_lcd_mode+0x80>
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	16 2f       	mov	r17, r22
 170:	18 2b       	or	r17, r24
 172:	19 83       	std	Y+1, r17	; 0x01
 174:	80 2f       	mov	r24, r16
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	81 2b       	or	r24, r17
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	8a 83       	std	Y+2, r24	; 0x02
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	20 e1       	ldi	r18, 0x10	; 16
 184:	02 9f       	mul	r16, r18
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	81 2b       	or	r24, r17
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	8c 83       	std	Y+4, r24	; 0x04
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	8d 83       	std	Y+5, r24	; 0x05
 194:	45 e0       	ldi	r20, 0x05	; 5
 196:	be 01       	movw	r22, r28
 198:	6f 5f       	subi	r22, 0xFF	; 255
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	87 e2       	ldi	r24, 0x27	; 39
 19e:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 1a2:	10 fd       	sbrc	r17, 0
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <wr_lcd_mode+0x80>
 1a6:	03 30       	cpi	r16, 0x03	; 3
 1a8:	30 f4       	brcc	.+12     	; 0x1b6 <wr_lcd_mode+0x80>
 1aa:	e3 ef       	ldi	r30, 0xF3	; 243
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <wr_lcd_mode+0x78>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <wr_lcd_mode+0x7e>
 1b4:	00 00       	nop
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <lcd_gotoxy>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	d8 2f       	mov	r29, r24
 1d0:	c6 2f       	mov	r28, r22
 1d2:	e6 2f       	mov	r30, r22
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ef 5f       	subi	r30, 0xFF	; 255
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	8d 2b       	or	r24, r29
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
 1e6:	d0 93 17 01 	sts	0x0117, r29	; 0x800117 <_lcd_x>
 1ea:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <_lcd_y>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <lcd_clrscr>:
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
 1fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_lcd_y>
 200:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_lcd_x>
 204:	08 95       	ret

00000206 <lcd_putc>:
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
 20a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_lcd_x>
 20e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_lcd_maxx>
 212:	98 17       	cp	r25, r24
 214:	10 f4       	brcc	.+4      	; 0x21a <lcd_putc+0x14>
 216:	ca 30       	cpi	r28, 0x0A	; 10
 218:	41 f4       	brne	.+16     	; 0x22a <lcd_putc+0x24>
 21a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_lcd_y>
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <_lcd_y>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>
 22a:	ca 30       	cpi	r28, 0x0A	; 10
 22c:	49 f0       	breq	.+18     	; 0x240 <lcd_putc+0x3a>
 22e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_lcd_x>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_lcd_x>
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <lcd_puts>:
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <lcd_puts+0xe>
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	0e 94 03 01 	call	0x206	; 0x206 <lcd_putc>
 252:	88 81       	ld	r24, Y
 254:	81 11       	cpse	r24, r1
 256:	fa cf       	rjmp	.-12     	; 0x24c <lcd_puts+0x8>
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <lcd_puts_p>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	fc 01       	movw	r30, r24
 264:	03 c0       	rjmp	.+6      	; 0x26c <lcd_puts_p+0xe>
 266:	0e 94 03 01 	call	0x206	; 0x206 <lcd_putc>
 26a:	fe 01       	movw	r30, r28
 26c:	ef 01       	movw	r28, r30
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	84 91       	lpm	r24, Z
 272:	81 11       	cpse	r24, r1
 274:	f8 cf       	rjmp	.-16     	; 0x266 <lcd_puts_p+0x8>
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <lcd_init+0xa>
 286:	00 d0       	rcall	.+0      	; 0x288 <lcd_init+0xc>
 288:	00 d0       	rcall	.+0      	; 0x28a <lcd_init+0xe>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	89 83       	std	Y+1, r24	; 0x01
 294:	94 e3       	ldi	r25, 0x34	; 52
 296:	9a 83       	std	Y+2, r25	; 0x02
 298:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 29a:	80 e2       	ldi	r24, 0x20	; 32
 29c:	8c 83       	std	Y+4, r24	; 0x04
 29e:	94 e2       	ldi	r25, 0x24	; 36
 2a0:	9d 83       	std	Y+5, r25	; 0x05
 2a2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 2a4:	80 e1       	ldi	r24, 0x10	; 16
 2a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 2aa:	e1 e0       	ldi	r30, 0x01	; 1
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	80 81       	ld	r24, Z
 2b0:	80 5f       	subi	r24, 0xF0	; 240
 2b2:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	80 5f       	subi	r24, 0xF0	; 240
 2b8:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 2ba:	84 b1       	in	r24, 0x04	; 4
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 2c6:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	8b e4       	ldi	r24, 0x4B	; 75
 2cc:	9d e1       	ldi	r25, 0x1D	; 29
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_init+0x52>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcd_init+0x58>
 2d4:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 2d6:	43 e0       	ldi	r20, 0x03	; 3
 2d8:	be 01       	movw	r22, r28
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	87 e2       	ldi	r24, 0x27	; 39
 2e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 2e4:	18 2f       	mov	r17, r24
 2e6:	81 ee       	ldi	r24, 0xE1	; 225
 2e8:	94 e0       	ldi	r25, 0x04	; 4
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_init+0x6e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_init+0x74>
 2f0:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 2f2:	43 e0       	ldi	r20, 0x03	; 3
 2f4:	be 01       	movw	r22, r28
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	87 e2       	ldi	r24, 0x27	; 39
 2fc:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 300:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 302:	43 e0       	ldi	r20, 0x03	; 3
 304:	be 01       	movw	r22, r28
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	87 e2       	ldi	r24, 0x27	; 39
 30c:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 310:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	be 01       	movw	r22, r28
 316:	6c 5f       	subi	r22, 0xFC	; 252
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	87 e2       	ldi	r24, 0x27	; 39
 31c:	0e 94 7a 00 	call	0xf4	; 0xf4 <I2C_WRITESEQ>
 320:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
 32a:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 32c:	19 f0       	breq	.+6      	; 0x334 <lcd_init+0xb8>
 32e:	85 b1       	in	r24, 0x05	; 5
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	80 2f       	mov	r24, r16
 350:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
}
 354:	26 96       	adiw	r28, 0x06	; 6
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	08 95       	ret

0000036a <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 36a:	68 e0       	ldi	r22, 0x08	; 8
 36c:	0e 94 9b 00 	call	0x136	; 0x136 <wr_lcd_mode>
 370:	08 95       	ret

00000372 <buttonsInit>:
			return 1;
	} else {
		PORTB &= ~(1<<DDB5);
		return 0;
	}
}
 372:	84 b1       	in	r24, 0x04	; 4
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	84 b9       	out	0x04, r24	; 4
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	87 7f       	andi	r24, 0xF7	; 247
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	85 b1       	in	r24, 0x05	; 5
 380:	84 60       	ori	r24, 0x04	; 4
 382:	85 b9       	out	0x05, r24	; 5
 384:	8b b1       	in	r24, 0x0b	; 11
 386:	88 60       	ori	r24, 0x08	; 8
 388:	8b b9       	out	0x0b, r24	; 11
 38a:	08 95       	ret

0000038c <selectMode>:

int selectMode() {
	unsigned char buttonState = PIND & 0b00001000;
	if ((buttonState & (1<<DDD3)) == 0) {
 38c:	4b 99       	sbic	0x09, 3	; 9
 38e:	06 c0       	rjmp	.+12     	; 0x39c <selectMode+0x10>
		PORTB |= (1<<DDB5);
 390:	85 b1       	in	r24, 0x05	; 5
 392:	80 62       	ori	r24, 0x20	; 32
 394:	85 b9       	out	0x05, r24	; 5
		return 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret
		} else {
		PORTB &= ~(1<<DDB5);
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	85 b9       	out	0x05, r24	; 5
		return 0;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3a6:	08 95       	ret

000003a8 <main>:
#define selectResetButtun DDD3



int main(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	2b 97       	sbiw	r28, 0x0b	; 11
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	buttonsInit();
 3bc:	0e 94 b9 01 	call	0x372	; 0x372 <buttonsInit>
	millis_init();
 3c0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <millis_init>
	lcdDisplayInit();
 3c4:	0e 94 6e 00 	call	0xdc	; 0xdc <lcdDisplayInit>
	
	char milli[10 + sizeof(char)];
	
	
	DDRB |= (1<<DDB5);
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		selectMode();
 3ce:	0e 94 c6 01 	call	0x38c	; 0x38c <selectMode>
		
		
		
		
	
		sprintf(milli, "%ld", millis());
 3d2:	0e 94 3a 02 	call	0x474	; 0x474 <millis>
 3d6:	9f 93       	push	r25
 3d8:	8f 93       	push	r24
 3da:	7f 93       	push	r23
 3dc:	6f 93       	push	r22
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	0e 94 8b 02 	call	0x516	; 0x516 <sprintf>
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
 3fc:	e8 cf       	rjmp	.-48     	; 0x3ce <main+0x26>

000003fe <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 3fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 402:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 406:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end+0x2>
 40a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR0A |= (1<<WGM01);
 40e:	84 b5       	in	r24, 0x24	; 36
 410:	82 60       	ori	r24, 0x02	; 2
 412:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
 414:	85 b5       	in	r24, 0x25	; 37
 416:	83 60       	ori	r24, 0x03	; 3
 418:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
 41a:	89 ef       	ldi	r24, 0xF9	; 249
 41c:	87 bd       	out	0x27, r24	; 39
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
 41e:	ee e6       	ldi	r30, 0x6E	; 110
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	82 60       	ori	r24, 0x02	; 2
 426:	80 83       	st	Z, r24
 428:	08 95       	ret

0000042a <__vector_14>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER0_COMPA_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
	ms++;
 43c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 440:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 444:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__data_end+0x2>
 448:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__data_end+0x3>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	a1 1d       	adc	r26, r1
 450:	b1 1d       	adc	r27, r1
 452:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 456:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 45a:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__data_end+0x2>
 45e:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__data_end+0x3>
}
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 474:	f8 94       	cli
	uint32_t ret = ms;
 476:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <__data_end>
 47a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <__data_end+0x1>
 47e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 482:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x3>
	sei();
 486:	78 94       	sei
	return ret;
 488:	08 95       	ret

0000048a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 48a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 494:	08 95       	ret

00000496 <i2c_start>:
 496:	94 ea       	ldi	r25, 0xA4	; 164
 498:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 49c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4a0:	99 23       	and	r25, r25
 4a2:	e4 f7       	brge	.-8      	; 0x49c <i2c_start+0x6>
 4a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a8:	98 7f       	andi	r25, 0xF8	; 248
 4aa:	98 30       	cpi	r25, 0x08	; 8
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <i2c_start+0x1c>
 4ae:	90 31       	cpi	r25, 0x10	; 16
 4b0:	91 f4       	brne	.+36     	; 0x4d6 <i2c_start+0x40>
 4b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4b6:	84 e8       	ldi	r24, 0x84	; 132
 4b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c0:	88 23       	and	r24, r24
 4c2:	e4 f7       	brge	.-8      	; 0x4bc <i2c_start+0x26>
 4c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4c8:	88 7f       	andi	r24, 0xF8	; 248
 4ca:	88 31       	cpi	r24, 0x18	; 24
 4cc:	31 f0       	breq	.+12     	; 0x4da <i2c_start+0x44>
 4ce:	80 34       	cpi	r24, 0x40	; 64
 4d0:	31 f4       	brne	.+12     	; 0x4de <i2c_start+0x48>
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	08 95       	ret
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret

000004e2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4e2:	84 e9       	ldi	r24, 0x94	; 148
 4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 4e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ec:	84 fd       	sbrc	r24, 4
 4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <i2c_stop+0x6>

}/* i2c_stop */
 4f0:	08 95       	ret

000004f2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 4f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 4f6:	84 e8       	ldi	r24, 0x84	; 132
 4f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 4fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 500:	88 23       	and	r24, r24
 502:	e4 f7       	brge	.-8      	; 0x4fc <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 504:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 508:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 50a:	88 32       	cpi	r24, 0x28	; 40
 50c:	11 f0       	breq	.+4      	; 0x512 <i2c_write+0x20>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
	return 0;
 512:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 514:	08 95       	ret

00000516 <sprintf>:
 516:	ae e0       	ldi	r26, 0x0E	; 14
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e1 e9       	ldi	r30, 0x91	; 145
 51c:	f2 e0       	ldi	r31, 0x02	; 2
 51e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__prologue_saves__+0x1c>
 522:	0d 89       	ldd	r16, Y+21	; 0x15
 524:	1e 89       	ldd	r17, Y+22	; 0x16
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	8c 83       	std	Y+4, r24	; 0x04
 52a:	1a 83       	std	Y+2, r17	; 0x02
 52c:	09 83       	std	Y+1, r16	; 0x01
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	9f e7       	ldi	r25, 0x7F	; 127
 532:	9e 83       	std	Y+6, r25	; 0x06
 534:	8d 83       	std	Y+5, r24	; 0x05
 536:	ae 01       	movw	r20, r28
 538:	47 5e       	subi	r20, 0xE7	; 231
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	6f 89       	ldd	r22, Y+23	; 0x17
 53e:	78 8d       	ldd	r23, Y+24	; 0x18
 540:	ce 01       	movw	r24, r28
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	0e 94 ad 02 	call	0x55a	; 0x55a <vfprintf>
 548:	ef 81       	ldd	r30, Y+7	; 0x07
 54a:	f8 85       	ldd	r31, Y+8	; 0x08
 54c:	e0 0f       	add	r30, r16
 54e:	f1 1f       	adc	r31, r17
 550:	10 82       	st	Z, r1
 552:	2e 96       	adiw	r28, 0x0e	; 14
 554:	e4 e0       	ldi	r30, 0x04	; 4
 556:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__epilogue_restores__+0x1c>

0000055a <vfprintf>:
 55a:	ab e0       	ldi	r26, 0x0B	; 11
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e3 eb       	ldi	r30, 0xB3	; 179
 560:	f2 e0       	ldi	r31, 0x02	; 2
 562:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__prologue_saves__>
 566:	6c 01       	movw	r12, r24
 568:	7b 01       	movw	r14, r22
 56a:	8a 01       	movw	r16, r20
 56c:	fc 01       	movw	r30, r24
 56e:	17 82       	std	Z+7, r1	; 0x07
 570:	16 82       	std	Z+6, r1	; 0x06
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	81 ff       	sbrs	r24, 1
 576:	cc c1       	rjmp	.+920    	; 0x910 <__stack+0x11>
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	3c 01       	movw	r6, r24
 57e:	f6 01       	movw	r30, r12
 580:	93 81       	ldd	r25, Z+3	; 0x03
 582:	f7 01       	movw	r30, r14
 584:	93 fd       	sbrc	r25, 3
 586:	85 91       	lpm	r24, Z+
 588:	93 ff       	sbrs	r25, 3
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	88 23       	and	r24, r24
 590:	09 f4       	brne	.+2      	; 0x594 <vfprintf+0x3a>
 592:	ba c1       	rjmp	.+884    	; 0x908 <__stack+0x9>
 594:	85 32       	cpi	r24, 0x25	; 37
 596:	39 f4       	brne	.+14     	; 0x5a6 <vfprintf+0x4c>
 598:	93 fd       	sbrc	r25, 3
 59a:	85 91       	lpm	r24, Z+
 59c:	93 ff       	sbrs	r25, 3
 59e:	81 91       	ld	r24, Z+
 5a0:	7f 01       	movw	r14, r30
 5a2:	85 32       	cpi	r24, 0x25	; 37
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <vfprintf+0x56>
 5a6:	b6 01       	movw	r22, r12
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 5ae:	e7 cf       	rjmp	.-50     	; 0x57e <vfprintf+0x24>
 5b0:	91 2c       	mov	r9, r1
 5b2:	21 2c       	mov	r2, r1
 5b4:	31 2c       	mov	r3, r1
 5b6:	ff e1       	ldi	r31, 0x1F	; 31
 5b8:	f3 15       	cp	r31, r3
 5ba:	d8 f0       	brcs	.+54     	; 0x5f2 <vfprintf+0x98>
 5bc:	8b 32       	cpi	r24, 0x2B	; 43
 5be:	79 f0       	breq	.+30     	; 0x5de <vfprintf+0x84>
 5c0:	38 f4       	brcc	.+14     	; 0x5d0 <vfprintf+0x76>
 5c2:	80 32       	cpi	r24, 0x20	; 32
 5c4:	79 f0       	breq	.+30     	; 0x5e4 <vfprintf+0x8a>
 5c6:	83 32       	cpi	r24, 0x23	; 35
 5c8:	a1 f4       	brne	.+40     	; 0x5f2 <vfprintf+0x98>
 5ca:	23 2d       	mov	r18, r3
 5cc:	20 61       	ori	r18, 0x10	; 16
 5ce:	1d c0       	rjmp	.+58     	; 0x60a <vfprintf+0xb0>
 5d0:	8d 32       	cpi	r24, 0x2D	; 45
 5d2:	61 f0       	breq	.+24     	; 0x5ec <vfprintf+0x92>
 5d4:	80 33       	cpi	r24, 0x30	; 48
 5d6:	69 f4       	brne	.+26     	; 0x5f2 <vfprintf+0x98>
 5d8:	23 2d       	mov	r18, r3
 5da:	21 60       	ori	r18, 0x01	; 1
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <vfprintf+0xb0>
 5de:	83 2d       	mov	r24, r3
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	38 2e       	mov	r3, r24
 5e4:	e3 2d       	mov	r30, r3
 5e6:	e4 60       	ori	r30, 0x04	; 4
 5e8:	3e 2e       	mov	r3, r30
 5ea:	2a c0       	rjmp	.+84     	; 0x640 <vfprintf+0xe6>
 5ec:	f3 2d       	mov	r31, r3
 5ee:	f8 60       	ori	r31, 0x08	; 8
 5f0:	1d c0       	rjmp	.+58     	; 0x62c <vfprintf+0xd2>
 5f2:	37 fc       	sbrc	r3, 7
 5f4:	2d c0       	rjmp	.+90     	; 0x650 <vfprintf+0xf6>
 5f6:	20 ed       	ldi	r18, 0xD0	; 208
 5f8:	28 0f       	add	r18, r24
 5fa:	2a 30       	cpi	r18, 0x0A	; 10
 5fc:	40 f0       	brcs	.+16     	; 0x60e <vfprintf+0xb4>
 5fe:	8e 32       	cpi	r24, 0x2E	; 46
 600:	b9 f4       	brne	.+46     	; 0x630 <vfprintf+0xd6>
 602:	36 fc       	sbrc	r3, 6
 604:	81 c1       	rjmp	.+770    	; 0x908 <__stack+0x9>
 606:	23 2d       	mov	r18, r3
 608:	20 64       	ori	r18, 0x40	; 64
 60a:	32 2e       	mov	r3, r18
 60c:	19 c0       	rjmp	.+50     	; 0x640 <vfprintf+0xe6>
 60e:	36 fe       	sbrs	r3, 6
 610:	06 c0       	rjmp	.+12     	; 0x61e <vfprintf+0xc4>
 612:	8a e0       	ldi	r24, 0x0A	; 10
 614:	98 9e       	mul	r9, r24
 616:	20 0d       	add	r18, r0
 618:	11 24       	eor	r1, r1
 61a:	92 2e       	mov	r9, r18
 61c:	11 c0       	rjmp	.+34     	; 0x640 <vfprintf+0xe6>
 61e:	ea e0       	ldi	r30, 0x0A	; 10
 620:	2e 9e       	mul	r2, r30
 622:	20 0d       	add	r18, r0
 624:	11 24       	eor	r1, r1
 626:	22 2e       	mov	r2, r18
 628:	f3 2d       	mov	r31, r3
 62a:	f0 62       	ori	r31, 0x20	; 32
 62c:	3f 2e       	mov	r3, r31
 62e:	08 c0       	rjmp	.+16     	; 0x640 <vfprintf+0xe6>
 630:	8c 36       	cpi	r24, 0x6C	; 108
 632:	21 f4       	brne	.+8      	; 0x63c <vfprintf+0xe2>
 634:	83 2d       	mov	r24, r3
 636:	80 68       	ori	r24, 0x80	; 128
 638:	38 2e       	mov	r3, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <vfprintf+0xe6>
 63c:	88 36       	cpi	r24, 0x68	; 104
 63e:	41 f4       	brne	.+16     	; 0x650 <vfprintf+0xf6>
 640:	f7 01       	movw	r30, r14
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	7f 01       	movw	r14, r30
 64c:	81 11       	cpse	r24, r1
 64e:	b3 cf       	rjmp	.-154    	; 0x5b6 <vfprintf+0x5c>
 650:	98 2f       	mov	r25, r24
 652:	9f 7d       	andi	r25, 0xDF	; 223
 654:	95 54       	subi	r25, 0x45	; 69
 656:	93 30       	cpi	r25, 0x03	; 3
 658:	28 f4       	brcc	.+10     	; 0x664 <vfprintf+0x10a>
 65a:	0c 5f       	subi	r16, 0xFC	; 252
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	9f e3       	ldi	r25, 0x3F	; 63
 660:	99 83       	std	Y+1, r25	; 0x01
 662:	0d c0       	rjmp	.+26     	; 0x67e <vfprintf+0x124>
 664:	83 36       	cpi	r24, 0x63	; 99
 666:	31 f0       	breq	.+12     	; 0x674 <vfprintf+0x11a>
 668:	83 37       	cpi	r24, 0x73	; 115
 66a:	71 f0       	breq	.+28     	; 0x688 <vfprintf+0x12e>
 66c:	83 35       	cpi	r24, 0x53	; 83
 66e:	09 f0       	breq	.+2      	; 0x672 <vfprintf+0x118>
 670:	59 c0       	rjmp	.+178    	; 0x724 <vfprintf+0x1ca>
 672:	21 c0       	rjmp	.+66     	; 0x6b6 <vfprintf+0x15c>
 674:	f8 01       	movw	r30, r16
 676:	80 81       	ld	r24, Z
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	0e 5f       	subi	r16, 0xFE	; 254
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	88 24       	eor	r8, r8
 680:	83 94       	inc	r8
 682:	91 2c       	mov	r9, r1
 684:	53 01       	movw	r10, r6
 686:	13 c0       	rjmp	.+38     	; 0x6ae <vfprintf+0x154>
 688:	28 01       	movw	r4, r16
 68a:	f2 e0       	ldi	r31, 0x02	; 2
 68c:	4f 0e       	add	r4, r31
 68e:	51 1c       	adc	r5, r1
 690:	f8 01       	movw	r30, r16
 692:	a0 80       	ld	r10, Z
 694:	b1 80       	ldd	r11, Z+1	; 0x01
 696:	36 fe       	sbrs	r3, 6
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <vfprintf+0x146>
 69a:	69 2d       	mov	r22, r9
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <vfprintf+0x14a>
 6a0:	6f ef       	ldi	r22, 0xFF	; 255
 6a2:	7f ef       	ldi	r23, 0xFF	; 255
 6a4:	c5 01       	movw	r24, r10
 6a6:	0e 94 99 04 	call	0x932	; 0x932 <strnlen>
 6aa:	4c 01       	movw	r8, r24
 6ac:	82 01       	movw	r16, r4
 6ae:	f3 2d       	mov	r31, r3
 6b0:	ff 77       	andi	r31, 0x7F	; 127
 6b2:	3f 2e       	mov	r3, r31
 6b4:	16 c0       	rjmp	.+44     	; 0x6e2 <vfprintf+0x188>
 6b6:	28 01       	movw	r4, r16
 6b8:	22 e0       	ldi	r18, 0x02	; 2
 6ba:	42 0e       	add	r4, r18
 6bc:	51 1c       	adc	r5, r1
 6be:	f8 01       	movw	r30, r16
 6c0:	a0 80       	ld	r10, Z
 6c2:	b1 80       	ldd	r11, Z+1	; 0x01
 6c4:	36 fe       	sbrs	r3, 6
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <vfprintf+0x174>
 6c8:	69 2d       	mov	r22, r9
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <vfprintf+0x178>
 6ce:	6f ef       	ldi	r22, 0xFF	; 255
 6d0:	7f ef       	ldi	r23, 0xFF	; 255
 6d2:	c5 01       	movw	r24, r10
 6d4:	0e 94 8e 04 	call	0x91c	; 0x91c <strnlen_P>
 6d8:	4c 01       	movw	r8, r24
 6da:	f3 2d       	mov	r31, r3
 6dc:	f0 68       	ori	r31, 0x80	; 128
 6de:	3f 2e       	mov	r3, r31
 6e0:	82 01       	movw	r16, r4
 6e2:	33 fc       	sbrc	r3, 3
 6e4:	1b c0       	rjmp	.+54     	; 0x71c <vfprintf+0x1c2>
 6e6:	82 2d       	mov	r24, r2
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	88 16       	cp	r8, r24
 6ec:	99 06       	cpc	r9, r25
 6ee:	b0 f4       	brcc	.+44     	; 0x71c <vfprintf+0x1c2>
 6f0:	b6 01       	movw	r22, r12
 6f2:	80 e2       	ldi	r24, 0x20	; 32
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 6fa:	2a 94       	dec	r2
 6fc:	f4 cf       	rjmp	.-24     	; 0x6e6 <vfprintf+0x18c>
 6fe:	f5 01       	movw	r30, r10
 700:	37 fc       	sbrc	r3, 7
 702:	85 91       	lpm	r24, Z+
 704:	37 fe       	sbrs	r3, 7
 706:	81 91       	ld	r24, Z+
 708:	5f 01       	movw	r10, r30
 70a:	b6 01       	movw	r22, r12
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 712:	21 10       	cpse	r2, r1
 714:	2a 94       	dec	r2
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	82 1a       	sub	r8, r18
 71a:	91 08       	sbc	r9, r1
 71c:	81 14       	cp	r8, r1
 71e:	91 04       	cpc	r9, r1
 720:	71 f7       	brne	.-36     	; 0x6fe <vfprintf+0x1a4>
 722:	e8 c0       	rjmp	.+464    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 724:	84 36       	cpi	r24, 0x64	; 100
 726:	11 f0       	breq	.+4      	; 0x72c <vfprintf+0x1d2>
 728:	89 36       	cpi	r24, 0x69	; 105
 72a:	41 f5       	brne	.+80     	; 0x77c <vfprintf+0x222>
 72c:	f8 01       	movw	r30, r16
 72e:	37 fe       	sbrs	r3, 7
 730:	07 c0       	rjmp	.+14     	; 0x740 <vfprintf+0x1e6>
 732:	60 81       	ld	r22, Z
 734:	71 81       	ldd	r23, Z+1	; 0x01
 736:	82 81       	ldd	r24, Z+2	; 0x02
 738:	93 81       	ldd	r25, Z+3	; 0x03
 73a:	0c 5f       	subi	r16, 0xFC	; 252
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	08 c0       	rjmp	.+16     	; 0x750 <vfprintf+0x1f6>
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	07 2e       	mov	r0, r23
 746:	00 0c       	add	r0, r0
 748:	88 0b       	sbc	r24, r24
 74a:	99 0b       	sbc	r25, r25
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	f3 2d       	mov	r31, r3
 752:	ff 76       	andi	r31, 0x6F	; 111
 754:	3f 2e       	mov	r3, r31
 756:	97 ff       	sbrs	r25, 7
 758:	09 c0       	rjmp	.+18     	; 0x76c <vfprintf+0x212>
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	f0 68       	ori	r31, 0x80	; 128
 76a:	3f 2e       	mov	r3, r31
 76c:	2a e0       	ldi	r18, 0x0A	; 10
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	a3 01       	movw	r20, r6
 772:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__ultoa_invert>
 776:	88 2e       	mov	r8, r24
 778:	86 18       	sub	r8, r6
 77a:	45 c0       	rjmp	.+138    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 77c:	85 37       	cpi	r24, 0x75	; 117
 77e:	31 f4       	brne	.+12     	; 0x78c <vfprintf+0x232>
 780:	23 2d       	mov	r18, r3
 782:	2f 7e       	andi	r18, 0xEF	; 239
 784:	b2 2e       	mov	r11, r18
 786:	2a e0       	ldi	r18, 0x0A	; 10
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	25 c0       	rjmp	.+74     	; 0x7d6 <vfprintf+0x27c>
 78c:	93 2d       	mov	r25, r3
 78e:	99 7f       	andi	r25, 0xF9	; 249
 790:	b9 2e       	mov	r11, r25
 792:	8f 36       	cpi	r24, 0x6F	; 111
 794:	c1 f0       	breq	.+48     	; 0x7c6 <vfprintf+0x26c>
 796:	18 f4       	brcc	.+6      	; 0x79e <vfprintf+0x244>
 798:	88 35       	cpi	r24, 0x58	; 88
 79a:	79 f0       	breq	.+30     	; 0x7ba <vfprintf+0x260>
 79c:	b5 c0       	rjmp	.+362    	; 0x908 <__stack+0x9>
 79e:	80 37       	cpi	r24, 0x70	; 112
 7a0:	19 f0       	breq	.+6      	; 0x7a8 <vfprintf+0x24e>
 7a2:	88 37       	cpi	r24, 0x78	; 120
 7a4:	21 f0       	breq	.+8      	; 0x7ae <vfprintf+0x254>
 7a6:	b0 c0       	rjmp	.+352    	; 0x908 <__stack+0x9>
 7a8:	e9 2f       	mov	r30, r25
 7aa:	e0 61       	ori	r30, 0x10	; 16
 7ac:	be 2e       	mov	r11, r30
 7ae:	b4 fe       	sbrs	r11, 4
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <vfprintf+0x272>
 7b2:	fb 2d       	mov	r31, r11
 7b4:	f4 60       	ori	r31, 0x04	; 4
 7b6:	bf 2e       	mov	r11, r31
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x272>
 7ba:	34 fe       	sbrs	r3, 4
 7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <vfprintf+0x278>
 7be:	29 2f       	mov	r18, r25
 7c0:	26 60       	ori	r18, 0x06	; 6
 7c2:	b2 2e       	mov	r11, r18
 7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <vfprintf+0x278>
 7c6:	28 e0       	ldi	r18, 0x08	; 8
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <vfprintf+0x27c>
 7cc:	20 e1       	ldi	r18, 0x10	; 16
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x27c>
 7d2:	20 e1       	ldi	r18, 0x10	; 16
 7d4:	32 e0       	ldi	r19, 0x02	; 2
 7d6:	f8 01       	movw	r30, r16
 7d8:	b7 fe       	sbrs	r11, 7
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <vfprintf+0x290>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	0c 5f       	subi	r16, 0xFC	; 252
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <vfprintf+0x29c>
 7ea:	60 81       	ld	r22, Z
 7ec:	71 81       	ldd	r23, Z+1	; 0x01
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 5f       	subi	r16, 0xFE	; 254
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	a3 01       	movw	r20, r6
 7f8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__ultoa_invert>
 7fc:	88 2e       	mov	r8, r24
 7fe:	86 18       	sub	r8, r6
 800:	fb 2d       	mov	r31, r11
 802:	ff 77       	andi	r31, 0x7F	; 127
 804:	3f 2e       	mov	r3, r31
 806:	36 fe       	sbrs	r3, 6
 808:	0d c0       	rjmp	.+26     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 80a:	23 2d       	mov	r18, r3
 80c:	2e 7f       	andi	r18, 0xFE	; 254
 80e:	a2 2e       	mov	r10, r18
 810:	89 14       	cp	r8, r9
 812:	58 f4       	brcc	.+22     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 814:	34 fe       	sbrs	r3, 4
 816:	0b c0       	rjmp	.+22     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 818:	32 fc       	sbrc	r3, 2
 81a:	09 c0       	rjmp	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81c:	83 2d       	mov	r24, r3
 81e:	8e 7e       	andi	r24, 0xEE	; 238
 820:	a8 2e       	mov	r10, r24
 822:	05 c0       	rjmp	.+10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 824:	b8 2c       	mov	r11, r8
 826:	a3 2c       	mov	r10, r3
 828:	03 c0       	rjmp	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82a:	b8 2c       	mov	r11, r8
 82c:	01 c0       	rjmp	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	b9 2c       	mov	r11, r9
 830:	a4 fe       	sbrs	r10, 4
 832:	0f c0       	rjmp	.+30     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 834:	fe 01       	movw	r30, r28
 836:	e8 0d       	add	r30, r8
 838:	f1 1d       	adc	r31, r1
 83a:	80 81       	ld	r24, Z
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	21 f4       	brne	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 840:	9a 2d       	mov	r25, r10
 842:	99 7e       	andi	r25, 0xE9	; 233
 844:	a9 2e       	mov	r10, r25
 846:	09 c0       	rjmp	.+18     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 848:	a2 fe       	sbrs	r10, 2
 84a:	06 c0       	rjmp	.+12     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 84c:	b3 94       	inc	r11
 84e:	b3 94       	inc	r11
 850:	04 c0       	rjmp	.+8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 852:	8a 2d       	mov	r24, r10
 854:	86 78       	andi	r24, 0x86	; 134
 856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 858:	b3 94       	inc	r11
 85a:	a3 fc       	sbrc	r10, 3
 85c:	11 c0       	rjmp	.+34     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 85e:	a0 fe       	sbrs	r10, 0
 860:	06 c0       	rjmp	.+12     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 862:	b2 14       	cp	r11, r2
 864:	88 f4       	brcc	.+34     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 866:	28 0c       	add	r2, r8
 868:	92 2c       	mov	r9, r2
 86a:	9b 18       	sub	r9, r11
 86c:	0e c0       	rjmp	.+28     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 86e:	b2 14       	cp	r11, r2
 870:	60 f4       	brcc	.+24     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 872:	b6 01       	movw	r22, r12
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 87c:	b3 94       	inc	r11
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 880:	b2 14       	cp	r11, r2
 882:	18 f4       	brcc	.+6      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 884:	2b 18       	sub	r2, r11
 886:	02 c0       	rjmp	.+4      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 888:	98 2c       	mov	r9, r8
 88a:	21 2c       	mov	r2, r1
 88c:	a4 fe       	sbrs	r10, 4
 88e:	10 c0       	rjmp	.+32     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 890:	b6 01       	movw	r22, r12
 892:	80 e3       	ldi	r24, 0x30	; 48
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 89a:	a2 fe       	sbrs	r10, 2
 89c:	17 c0       	rjmp	.+46     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 89e:	a1 fc       	sbrc	r10, 1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a2:	88 e7       	ldi	r24, 0x78	; 120
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a8:	88 e5       	ldi	r24, 0x58	; 88
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	b6 01       	movw	r22, r12
 8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8b0:	8a 2d       	mov	r24, r10
 8b2:	86 78       	andi	r24, 0x86	; 134
 8b4:	59 f0       	breq	.+22     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8b6:	a1 fe       	sbrs	r10, 1
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8ba:	8b e2       	ldi	r24, 0x2B	; 43
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	a7 fc       	sbrc	r10, 7
 8c2:	8d e2       	ldi	r24, 0x2D	; 45
 8c4:	b6 01       	movw	r22, r12
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 8cc:	89 14       	cp	r8, r9
 8ce:	38 f4       	brcc	.+14     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d0:	b6 01       	movw	r22, r12
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 8da:	9a 94       	dec	r9
 8dc:	f7 cf       	rjmp	.-18     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8de:	8a 94       	dec	r8
 8e0:	f3 01       	movw	r30, r6
 8e2:	e8 0d       	add	r30, r8
 8e4:	f1 1d       	adc	r31, r1
 8e6:	80 81       	ld	r24, Z
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 8f0:	81 10       	cpse	r8, r1
 8f2:	f5 cf       	rjmp	.-22     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8f4:	22 20       	and	r2, r2
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f8:	42 ce       	rjmp	.-892    	; 0x57e <vfprintf+0x24>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 a4 04 	call	0x948	; 0x948 <fputc>
 904:	2a 94       	dec	r2
 906:	f6 cf       	rjmp	.-20     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 908:	f6 01       	movw	r30, r12
 90a:	86 81       	ldd	r24, Z+6	; 0x06
 90c:	97 81       	ldd	r25, Z+7	; 0x07
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	9f ef       	ldi	r25, 0xFF	; 255
 914:	2b 96       	adiw	r28, 0x0b	; 11
 916:	e2 e1       	ldi	r30, 0x12	; 18
 918:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__epilogue_restores__>

0000091c <strnlen_P>:
 91c:	fc 01       	movw	r30, r24
 91e:	05 90       	lpm	r0, Z+
 920:	61 50       	subi	r22, 0x01	; 1
 922:	70 40       	sbci	r23, 0x00	; 0
 924:	01 10       	cpse	r0, r1
 926:	d8 f7       	brcc	.-10     	; 0x91e <strnlen_P+0x2>
 928:	80 95       	com	r24
 92a:	90 95       	com	r25
 92c:	8e 0f       	add	r24, r30
 92e:	9f 1f       	adc	r25, r31
 930:	08 95       	ret

00000932 <strnlen>:
 932:	fc 01       	movw	r30, r24
 934:	61 50       	subi	r22, 0x01	; 1
 936:	70 40       	sbci	r23, 0x00	; 0
 938:	01 90       	ld	r0, Z+
 93a:	01 10       	cpse	r0, r1
 93c:	d8 f7       	brcc	.-10     	; 0x934 <strnlen+0x2>
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	8e 0f       	add	r24, r30
 944:	9f 1f       	adc	r25, r31
 946:	08 95       	ret

00000948 <fputc>:
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	fb 01       	movw	r30, r22
 952:	23 81       	ldd	r18, Z+3	; 0x03
 954:	21 fd       	sbrc	r18, 1
 956:	03 c0       	rjmp	.+6      	; 0x95e <fputc+0x16>
 958:	8f ef       	ldi	r24, 0xFF	; 255
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	2c c0       	rjmp	.+88     	; 0x9b6 <fputc+0x6e>
 95e:	22 ff       	sbrs	r18, 2
 960:	16 c0       	rjmp	.+44     	; 0x98e <fputc+0x46>
 962:	46 81       	ldd	r20, Z+6	; 0x06
 964:	57 81       	ldd	r21, Z+7	; 0x07
 966:	24 81       	ldd	r18, Z+4	; 0x04
 968:	35 81       	ldd	r19, Z+5	; 0x05
 96a:	42 17       	cp	r20, r18
 96c:	53 07       	cpc	r21, r19
 96e:	44 f4       	brge	.+16     	; 0x980 <fputc+0x38>
 970:	a0 81       	ld	r26, Z
 972:	b1 81       	ldd	r27, Z+1	; 0x01
 974:	9d 01       	movw	r18, r26
 976:	2f 5f       	subi	r18, 0xFF	; 255
 978:	3f 4f       	sbci	r19, 0xFF	; 255
 97a:	31 83       	std	Z+1, r19	; 0x01
 97c:	20 83       	st	Z, r18
 97e:	8c 93       	st	X, r24
 980:	26 81       	ldd	r18, Z+6	; 0x06
 982:	37 81       	ldd	r19, Z+7	; 0x07
 984:	2f 5f       	subi	r18, 0xFF	; 255
 986:	3f 4f       	sbci	r19, 0xFF	; 255
 988:	37 83       	std	Z+7, r19	; 0x07
 98a:	26 83       	std	Z+6, r18	; 0x06
 98c:	14 c0       	rjmp	.+40     	; 0x9b6 <fputc+0x6e>
 98e:	8b 01       	movw	r16, r22
 990:	ec 01       	movw	r28, r24
 992:	fb 01       	movw	r30, r22
 994:	00 84       	ldd	r0, Z+8	; 0x08
 996:	f1 85       	ldd	r31, Z+9	; 0x09
 998:	e0 2d       	mov	r30, r0
 99a:	09 95       	icall
 99c:	89 2b       	or	r24, r25
 99e:	e1 f6       	brne	.-72     	; 0x958 <fputc+0x10>
 9a0:	d8 01       	movw	r26, r16
 9a2:	16 96       	adiw	r26, 0x06	; 6
 9a4:	8d 91       	ld	r24, X+
 9a6:	9c 91       	ld	r25, X
 9a8:	17 97       	sbiw	r26, 0x07	; 7
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	17 96       	adiw	r26, 0x07	; 7
 9ae:	9c 93       	st	X, r25
 9b0:	8e 93       	st	-X, r24
 9b2:	16 97       	sbiw	r26, 0x06	; 6
 9b4:	ce 01       	movw	r24, r28
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	08 95       	ret

000009c0 <__ultoa_invert>:
 9c0:	fa 01       	movw	r30, r20
 9c2:	aa 27       	eor	r26, r26
 9c4:	28 30       	cpi	r18, 0x08	; 8
 9c6:	51 f1       	breq	.+84     	; 0xa1c <__ultoa_invert+0x5c>
 9c8:	20 31       	cpi	r18, 0x10	; 16
 9ca:	81 f1       	breq	.+96     	; 0xa2c <__ultoa_invert+0x6c>
 9cc:	e8 94       	clt
 9ce:	6f 93       	push	r22
 9d0:	6e 7f       	andi	r22, 0xFE	; 254
 9d2:	6e 5f       	subi	r22, 0xFE	; 254
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	af 4f       	sbci	r26, 0xFF	; 255
 9dc:	b1 e0       	ldi	r27, 0x01	; 1
 9de:	3e d0       	rcall	.+124    	; 0xa5c <__ultoa_invert+0x9c>
 9e0:	b4 e0       	ldi	r27, 0x04	; 4
 9e2:	3c d0       	rcall	.+120    	; 0xa5c <__ultoa_invert+0x9c>
 9e4:	67 0f       	add	r22, r23
 9e6:	78 1f       	adc	r23, r24
 9e8:	89 1f       	adc	r24, r25
 9ea:	9a 1f       	adc	r25, r26
 9ec:	a1 1d       	adc	r26, r1
 9ee:	68 0f       	add	r22, r24
 9f0:	79 1f       	adc	r23, r25
 9f2:	8a 1f       	adc	r24, r26
 9f4:	91 1d       	adc	r25, r1
 9f6:	a1 1d       	adc	r26, r1
 9f8:	6a 0f       	add	r22, r26
 9fa:	71 1d       	adc	r23, r1
 9fc:	81 1d       	adc	r24, r1
 9fe:	91 1d       	adc	r25, r1
 a00:	a1 1d       	adc	r26, r1
 a02:	20 d0       	rcall	.+64     	; 0xa44 <__ultoa_invert+0x84>
 a04:	09 f4       	brne	.+2      	; 0xa08 <__ultoa_invert+0x48>
 a06:	68 94       	set
 a08:	3f 91       	pop	r19
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	26 9f       	mul	r18, r22
 a0e:	11 24       	eor	r1, r1
 a10:	30 19       	sub	r19, r0
 a12:	30 5d       	subi	r19, 0xD0	; 208
 a14:	31 93       	st	Z+, r19
 a16:	de f6       	brtc	.-74     	; 0x9ce <__ultoa_invert+0xe>
 a18:	cf 01       	movw	r24, r30
 a1a:	08 95       	ret
 a1c:	46 2f       	mov	r20, r22
 a1e:	47 70       	andi	r20, 0x07	; 7
 a20:	40 5d       	subi	r20, 0xD0	; 208
 a22:	41 93       	st	Z+, r20
 a24:	b3 e0       	ldi	r27, 0x03	; 3
 a26:	0f d0       	rcall	.+30     	; 0xa46 <__ultoa_invert+0x86>
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__ultoa_invert+0x5c>
 a2a:	f6 cf       	rjmp	.-20     	; 0xa18 <__ultoa_invert+0x58>
 a2c:	46 2f       	mov	r20, r22
 a2e:	4f 70       	andi	r20, 0x0F	; 15
 a30:	40 5d       	subi	r20, 0xD0	; 208
 a32:	4a 33       	cpi	r20, 0x3A	; 58
 a34:	18 f0       	brcs	.+6      	; 0xa3c <__ultoa_invert+0x7c>
 a36:	49 5d       	subi	r20, 0xD9	; 217
 a38:	31 fd       	sbrc	r19, 1
 a3a:	40 52       	subi	r20, 0x20	; 32
 a3c:	41 93       	st	Z+, r20
 a3e:	02 d0       	rcall	.+4      	; 0xa44 <__ultoa_invert+0x84>
 a40:	a9 f7       	brne	.-22     	; 0xa2c <__ultoa_invert+0x6c>
 a42:	ea cf       	rjmp	.-44     	; 0xa18 <__ultoa_invert+0x58>
 a44:	b4 e0       	ldi	r27, 0x04	; 4
 a46:	a6 95       	lsr	r26
 a48:	97 95       	ror	r25
 a4a:	87 95       	ror	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__ultoa_invert+0x86>
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	61 05       	cpc	r22, r1
 a58:	71 05       	cpc	r23, r1
 a5a:	08 95       	ret
 a5c:	9b 01       	movw	r18, r22
 a5e:	ac 01       	movw	r20, r24
 a60:	0a 2e       	mov	r0, r26
 a62:	06 94       	lsr	r0
 a64:	57 95       	ror	r21
 a66:	47 95       	ror	r20
 a68:	37 95       	ror	r19
 a6a:	27 95       	ror	r18
 a6c:	ba 95       	dec	r27
 a6e:	c9 f7       	brne	.-14     	; 0xa62 <__ultoa_invert+0xa2>
 a70:	62 0f       	add	r22, r18
 a72:	73 1f       	adc	r23, r19
 a74:	84 1f       	adc	r24, r20
 a76:	95 1f       	adc	r25, r21
 a78:	a0 1d       	adc	r26, r0
 a7a:	08 95       	ret

00000a7c <__prologue_saves__>:
 a7c:	2f 92       	push	r2
 a7e:	3f 92       	push	r3
 a80:	4f 92       	push	r4
 a82:	5f 92       	push	r5
 a84:	6f 92       	push	r6
 a86:	7f 92       	push	r7
 a88:	8f 92       	push	r8
 a8a:	9f 92       	push	r9
 a8c:	af 92       	push	r10
 a8e:	bf 92       	push	r11
 a90:	cf 92       	push	r12
 a92:	df 92       	push	r13
 a94:	ef 92       	push	r14
 a96:	ff 92       	push	r15
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	ca 1b       	sub	r28, r26
 aa6:	db 0b       	sbc	r29, r27
 aa8:	0f b6       	in	r0, 0x3f	; 63
 aaa:	f8 94       	cli
 aac:	de bf       	out	0x3e, r29	; 62
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	cd bf       	out	0x3d, r28	; 61
 ab2:	09 94       	ijmp

00000ab4 <__epilogue_restores__>:
 ab4:	2a 88       	ldd	r2, Y+18	; 0x12
 ab6:	39 88       	ldd	r3, Y+17	; 0x11
 ab8:	48 88       	ldd	r4, Y+16	; 0x10
 aba:	5f 84       	ldd	r5, Y+15	; 0x0f
 abc:	6e 84       	ldd	r6, Y+14	; 0x0e
 abe:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ac6:	b9 84       	ldd	r11, Y+9	; 0x09
 ac8:	c8 84       	ldd	r12, Y+8	; 0x08
 aca:	df 80       	ldd	r13, Y+7	; 0x07
 acc:	ee 80       	ldd	r14, Y+6	; 0x06
 ace:	fd 80       	ldd	r15, Y+5	; 0x05
 ad0:	0c 81       	ldd	r16, Y+4	; 0x04
 ad2:	1b 81       	ldd	r17, Y+3	; 0x03
 ad4:	aa 81       	ldd	r26, Y+2	; 0x02
 ad6:	b9 81       	ldd	r27, Y+1	; 0x01
 ad8:	ce 0f       	add	r28, r30
 ada:	d1 1d       	adc	r29, r1
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	f8 94       	cli
 ae0:	de bf       	out	0x3e, r29	; 62
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	cd bf       	out	0x3d, r28	; 61
 ae6:	ed 01       	movw	r28, r26
 ae8:	08 95       	ret

00000aea <_exit>:
 aea:	f8 94       	cli

00000aec <__stop_program>:
 aec:	ff cf       	rjmp	.-2      	; 0xaec <__stop_program>
