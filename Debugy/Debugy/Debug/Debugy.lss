
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000526  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800140  00800140  000005fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152e  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc7  00000000  00000000  00002842  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000600  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d3  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000044ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	44 65       	ori	r20, 0x54	; 84
  6a:	62 75       	andi	r22, 0x52	; 82
  6c:	67 67       	ori	r22, 0x77	; 119
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e2       	ldi	r30, 0x26	; 38
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 34       	cpi	r26, 0x40	; 64
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e4       	ldi	r26, 0x40	; 64
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 34       	cpi	r26, 0x48	; 72
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  a6:	0c 94 91 02 	jmp	0x522	; 0x522 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <buttonsInit>:
#define selectResetButton DDD3


void buttonsInit() {
	//sets the pins so it are input pins
	DDRB &= ~(1<<scrollButton);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<selectResetButton);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	8a b9       	out	0x0a, r24	; 10
	
	//temp for testing becuase this is for pull up
	PORTB |= (1<<PORTB2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1<<PORTD3);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret

000000c8 <scrollInMenu>:
}

int scrollInMenu() {
	unsigned char buttonState = PINB & 0b00000100;
	if ((buttonState & (1<<scrollButton)) == 0) {
  c8:	1a 99       	sbic	0x03, 2	; 3
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <scrollInMenu+0xa>
		return 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret
		} else {
		return 0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  d6:	08 95       	ret

000000d8 <selectMode>:

int selectMode() {
	unsigned char buttonState = PIND & 0b00001000;
	if ((buttonState & (1<<selectResetButton)) == 0) {
  d8:	4b 99       	sbic	0x09, 3	; 9
  da:	03 c0       	rjmp	.+6      	; 0xe2 <selectMode+0xa>
		return 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
		} else {
		return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	}
  e6:	08 95       	ret

000000e8 <printWelcomeScreen>:
enum Modes {Slave, Bluetooth, Autonoom};

extern void lcd_backlight(char on);    //not in lcd.h

void printWelcomeScreen(void) {
	lcd_clrscr();
  e8:	0e 94 13 01 	call	0x226	; 0x226 <lcd_clrscr>
	lcd_gotoxy(0, 0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_gotoxy>
	lcd_puts_P("Debuggy");
  f4:	88 e6       	ldi	r24, 0x68	; 104
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 48 01 	call	0x290	; 0x290 <lcd_puts_p>
	lcd_gotoxy(0, 1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_gotoxy>
	lcd_puts("Team Antimotive"); 
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_puts>
 10c:	08 95       	ret

0000010e <lcdDisplayInit>:
}

void lcdDisplayInit(void) {
	 lcd_init(LCD_ON_DISPLAY);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_init>
	 lcd_backlight(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_backlight>
	 lcd_backlight(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_backlight>
	 printWelcomeScreen();
 120:	0e 94 74 00 	call	0xe8	; 0xe8 <printWelcomeScreen>
 124:	08 95       	ret

00000126 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8b 01       	movw	r16, r22
 130:	d4 2f       	mov	r29, r20
 132:	88 0f       	add	r24, r24
 134:	0e 94 51 02 	call	0x4a2	; 0x4a2 <i2c_start>
 138:	88 23       	and	r24, r24
 13a:	51 f0       	breq	.+20     	; 0x150 <I2C_WRITESEQ+0x2a>
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	0c c0       	rjmp	.+24     	; 0x158 <I2C_WRITESEQ+0x32>
 140:	f8 01       	movw	r30, r16
 142:	ec 0f       	add	r30, r28
 144:	f1 1d       	adc	r31, r1
 146:	80 81       	ld	r24, Z
 148:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2c_write>
 14c:	cf 5f       	subi	r28, 0xFF	; 255
 14e:	01 c0       	rjmp	.+2      	; 0x152 <I2C_WRITESEQ+0x2c>
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	cd 17       	cp	r28, r29
 154:	a8 f3       	brcs	.-22     	; 0x140 <I2C_WRITESEQ+0x1a>
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_stop>
 15c:	8c 2f       	mov	r24, r28
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <wr_lcd_mode>:
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <wr_lcd_mode+0xa>
 172:	00 d0       	rcall	.+0      	; 0x174 <wr_lcd_mode+0xc>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	08 2f       	mov	r16, r24
 17c:	68 30       	cpi	r22, 0x08	; 8
 17e:	71 f4       	brne	.+28     	; 0x19c <wr_lcd_mode+0x34>
 180:	88 23       	and	r24, r24
 182:	11 f0       	breq	.+4      	; 0x188 <wr_lcd_mode+0x20>
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	01 c0       	rjmp	.+2      	; 0x18a <wr_lcd_mode+0x22>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	71 e0       	ldi	r23, 0x01	; 1
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 19a:	26 c0       	rjmp	.+76     	; 0x1e8 <wr_lcd_mode+0x80>
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	16 2f       	mov	r17, r22
 1a2:	18 2b       	or	r17, r24
 1a4:	19 83       	std	Y+1, r17	; 0x01
 1a6:	80 2f       	mov	r24, r16
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	81 2b       	or	r24, r17
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	8a 83       	std	Y+2, r24	; 0x02
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	8b 83       	std	Y+3, r24	; 0x03
 1b4:	20 e1       	ldi	r18, 0x10	; 16
 1b6:	02 9f       	mul	r16, r18
 1b8:	c0 01       	movw	r24, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	81 2b       	or	r24, r17
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	8c 83       	std	Y+4, r24	; 0x04
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	8d 83       	std	Y+5, r24	; 0x05
 1c6:	45 e0       	ldi	r20, 0x05	; 5
 1c8:	be 01       	movw	r22, r28
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	87 e2       	ldi	r24, 0x27	; 39
 1d0:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 1d4:	10 fd       	sbrc	r17, 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <wr_lcd_mode+0x80>
 1d8:	03 30       	cpi	r16, 0x03	; 3
 1da:	30 f4       	brcc	.+12     	; 0x1e8 <wr_lcd_mode+0x80>
 1dc:	e3 ef       	ldi	r30, 0xF3	; 243
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <wr_lcd_mode+0x78>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <wr_lcd_mode+0x7e>
 1e6:	00 00       	nop
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <lcd_gotoxy>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	d8 2f       	mov	r29, r24
 202:	c6 2f       	mov	r28, r22
 204:	e6 2f       	mov	r30, r22
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ef 5f       	subi	r30, 0xFF	; 255
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 81       	ld	r24, Z
 20e:	8d 2b       	or	r24, r29
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	80 68       	ori	r24, 0x80	; 128
 214:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
 218:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <_lcd_x>
 21c:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <_lcd_y>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcd_clrscr>:
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
 22e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_lcd_y>
 232:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_lcd_x>
 236:	08 95       	ret

00000238 <lcd_putc>:
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
 23c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_lcd_x>
 240:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_lcd_maxx>
 244:	98 17       	cp	r25, r24
 246:	10 f4       	brcc	.+4      	; 0x24c <lcd_putc+0x14>
 248:	ca 30       	cpi	r28, 0x0A	; 10
 24a:	41 f4       	brne	.+16     	; 0x25c <lcd_putc+0x24>
 24c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <_lcd_y>
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <_lcd_y>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_gotoxy>
 25c:	ca 30       	cpi	r28, 0x0A	; 10
 25e:	49 f0       	breq	.+18     	; 0x272 <lcd_putc+0x3a>
 260:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_lcd_x>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_lcd_x>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <lcd_puts>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
 27c:	03 c0       	rjmp	.+6      	; 0x284 <lcd_puts+0xe>
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_putc>
 284:	88 81       	ld	r24, Y
 286:	81 11       	cpse	r24, r1
 288:	fa cf       	rjmp	.-12     	; 0x27e <lcd_puts+0x8>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_puts_p>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	fc 01       	movw	r30, r24
 296:	03 c0       	rjmp	.+6      	; 0x29e <lcd_puts_p+0xe>
 298:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_putc>
 29c:	fe 01       	movw	r30, r28
 29e:	ef 01       	movw	r28, r30
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	84 91       	lpm	r24, Z
 2a4:	81 11       	cpse	r24, r1
 2a6:	f8 cf       	rjmp	.-16     	; 0x298 <lcd_puts_p+0x8>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <lcd_init+0xa>
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <lcd_init+0xc>
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <lcd_init+0xe>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	94 e3       	ldi	r25, 0x34	; 52
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	8c 83       	std	Y+4, r24	; 0x04
 2d0:	94 e2       	ldi	r25, 0x24	; 36
 2d2:	9d 83       	std	Y+5, r25	; 0x05
 2d4:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 2d6:	80 e1       	ldi	r24, 0x10	; 16
 2d8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 2dc:	e1 e0       	ldi	r30, 0x01	; 1
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	80 81       	ld	r24, Z
 2e2:	80 5f       	subi	r24, 0xF0	; 240
 2e4:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	80 5f       	subi	r24, 0xF0	; 240
 2ea:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	84 b9       	out	0x04, r24	; 4
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 2f8:	0e 94 4b 02 	call	0x496	; 0x496 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	8b e4       	ldi	r24, 0x4B	; 75
 2fe:	9d e1       	ldi	r25, 0x1D	; 29
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_init+0x52>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_init+0x58>
 306:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 308:	43 e0       	ldi	r20, 0x03	; 3
 30a:	be 01       	movw	r22, r28
 30c:	6f 5f       	subi	r22, 0xFF	; 255
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	87 e2       	ldi	r24, 0x27	; 39
 312:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 316:	18 2f       	mov	r17, r24
 318:	81 ee       	ldi	r24, 0xE1	; 225
 31a:	94 e0       	ldi	r25, 0x04	; 4
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_init+0x6e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_init+0x74>
 322:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 324:	43 e0       	ldi	r20, 0x03	; 3
 326:	be 01       	movw	r22, r28
 328:	6f 5f       	subi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	87 e2       	ldi	r24, 0x27	; 39
 32e:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 332:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 334:	43 e0       	ldi	r20, 0x03	; 3
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	87 e2       	ldi	r24, 0x27	; 39
 33e:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 342:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 344:	43 e0       	ldi	r20, 0x03	; 3
 346:	be 01       	movw	r22, r28
 348:	6c 5f       	subi	r22, 0xFC	; 252
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	87 e2       	ldi	r24, 0x27	; 39
 34e:	0e 94 93 00 	call	0x126	; 0x126 <I2C_WRITESEQ>
 352:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
 35c:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 35e:	19 f0       	breq	.+6      	; 0x366 <lcd_init+0xb8>
 360:	85 b1       	in	r24, 0x05	; 5
 362:	8f 7d       	andi	r24, 0xDF	; 223
 364:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	80 2f       	mov	r24, r16
 382:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
}
 386:	26 96       	adiw	r28, 0x06	; 6
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 39c:	68 e0       	ldi	r22, 0x08	; 8
 39e:	0e 94 b4 00 	call	0x168	; 0x168 <wr_lcd_mode>
 3a2:	08 95       	ret

000003a4 <setup>:

enum Modes {Slave, Bluetooth, Autonoom, Stop} mode;

long lastPrint = 0;
void setup(void) {
	buttonsInit();
 3a4:	0e 94 57 00 	call	0xae	; 0xae <buttonsInit>
	millis_init();
 3a8:	0e 94 05 02 	call	0x40a	; 0x40a <millis_init>
	lcdDisplayInit();
 3ac:	0e 94 87 00 	call	0x10e	; 0x10e <lcdDisplayInit>
 3b0:	08 95       	ret

000003b2 <loop>:
	
}

void loop(void) {
	if (scrollInMenu()) {
 3b2:	0e 94 64 00 	call	0xc8	; 0xc8 <scrollInMenu>
 3b6:	89 2b       	or	r24, r25
 3b8:	51 f0       	breq	.+20     	; 0x3ce <loop+0x1c>
		if (mode < Autonoom) {
 3ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <mode>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	20 f4       	brcc	.+8      	; 0x3ca <loop+0x18>
			mode++;
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <mode>
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <loop+0x1c>
			} else if (mode = Autonoom) {
			mode = Slave;
 3ca:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <mode>
			} else {
			mode = Stop;
		}
	}
	if (lastPrint + 100 < millis()) {
 3ce:	0e 94 40 02 	call	0x480	; 0x480 <millis>
		
	}
	
	if (selectMode()) {
 3d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <selectMode>
 3d6:	89 2b       	or	r24, r25
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <loop+0x30>
		PORTB |= (1<<DDB5);
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	85 b9       	out	0x05, r24	; 5
 3e0:	08 95       	ret
		} else if (scrollInMenu()) {
 3e2:	0e 94 64 00 	call	0xc8	; 0xc8 <scrollInMenu>
 3e6:	89 2b       	or	r24, r25
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <loop+0x40>
		PORTB |= (1<<DDB5);
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	85 b9       	out	0x05, r24	; 5
 3f0:	08 95       	ret
		} else {
		PORTB &= ~(1<<DDB5);
 3f2:	85 b1       	in	r24, 0x05	; 5
 3f4:	8f 7d       	andi	r24, 0xDF	; 223
 3f6:	85 b9       	out	0x05, r24	; 5
 3f8:	08 95       	ret

000003fa <main>:
	}
}

int main(void)
{
	setup();
 3fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <setup>
	DDRB |= (1<<DDB5);
 3fe:	84 b1       	in	r24, 0x04	; 4
 400:	80 62       	ori	r24, 0x20	; 32
 402:	84 b9       	out	0x04, r24	; 4
	
	while (1) {
		loop();
 404:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <loop>
 408:	fd cf       	rjmp	.-6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

0000040a <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 40a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
 40e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
 412:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x2>
 416:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR0A |= (1<<WGM01);
 41a:	84 b5       	in	r24, 0x24	; 36
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
 420:	85 b5       	in	r24, 0x25	; 37
 422:	83 60       	ori	r24, 0x03	; 3
 424:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
 426:	89 ef       	ldi	r24, 0xF9	; 249
 428:	87 bd       	out	0x27, r24	; 39
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
 42a:	ee e6       	ldi	r30, 0x6E	; 110
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	82 60       	ori	r24, 0x02	; 2
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <__vector_14>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER0_COMPA_vect)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
	ms++;
 448:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 44c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 450:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__data_end+0x2>
 454:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__data_end+0x3>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
 45e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
 462:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 466:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <__data_end+0x2>
 46a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <__data_end+0x3>
}
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 480:	f8 94       	cli
	uint32_t ret = ms;
 482:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__data_end>
 486:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__data_end+0x1>
 48a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x2>
 48e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x3>
	sei();
 492:	78 94       	sei
	return ret;
 494:	08 95       	ret

00000496 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 496:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 4a0:	08 95       	ret

000004a2 <i2c_start>:
 4a2:	94 ea       	ldi	r25, 0xA4	; 164
 4a4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ac:	99 23       	and	r25, r25
 4ae:	e4 f7       	brge	.-8      	; 0x4a8 <i2c_start+0x6>
 4b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4b4:	98 7f       	andi	r25, 0xF8	; 248
 4b6:	98 30       	cpi	r25, 0x08	; 8
 4b8:	11 f0       	breq	.+4      	; 0x4be <i2c_start+0x1c>
 4ba:	90 31       	cpi	r25, 0x10	; 16
 4bc:	91 f4       	brne	.+36     	; 0x4e2 <i2c_start+0x40>
 4be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4c2:	84 e8       	ldi	r24, 0x84	; 132
 4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4cc:	88 23       	and	r24, r24
 4ce:	e4 f7       	brge	.-8      	; 0x4c8 <i2c_start+0x26>
 4d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4d4:	88 7f       	andi	r24, 0xF8	; 248
 4d6:	88 31       	cpi	r24, 0x18	; 24
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <i2c_start+0x44>
 4da:	80 34       	cpi	r24, 0x40	; 64
 4dc:	31 f4       	brne	.+12     	; 0x4ea <i2c_start+0x48>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	08 95       	ret

000004ee <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4ee:	84 e9       	ldi	r24, 0x94	; 148
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 4f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4f8:	84 fd       	sbrc	r24, 4
 4fa:	fc cf       	rjmp	.-8      	; 0x4f4 <i2c_stop+0x6>

}/* i2c_stop */
 4fc:	08 95       	ret

000004fe <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 4fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 502:	84 e8       	ldi	r24, 0x84	; 132
 504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 508:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 50c:	88 23       	and	r24, r24
 50e:	e4 f7       	brge	.-8      	; 0x508 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 510:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 514:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 516:	88 32       	cpi	r24, 0x28	; 40
 518:	11 f0       	breq	.+4      	; 0x51e <i2c_write+0x20>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	08 95       	ret
	return 0;
 51e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 520:	08 95       	ret

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
