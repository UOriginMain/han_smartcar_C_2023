
Debugy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800140  00800140  0000098e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a58  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da8  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e1  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000044fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  00004970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afb  00000000  00000000  000051bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	44 65       	ori	r20, 0x54	; 84
  6a:	62 75       	andi	r22, 0x52	; 82
  6c:	67 67       	ori	r22, 0x77	; 119
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea eb       	ldi	r30, 0xBA	; 186
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 34       	cpi	r26, 0x40	; 64
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e4       	ldi	r26, 0x40	; 64
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 39       	cpi	r26, 0x9B	; 155
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  a6:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <buttonsInit>:
ISR(PCINT0_vect)
{
	if ((scrollButtonState == 0) && (lastScrollButtonPress + 50 < millis())) {
		scrollButtonState = 1;
	}
}
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	e8 e6       	ldi	r30, 0x68	; 104
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	85 60       	ori	r24, 0x05	; 5
  c2:	80 83       	st	Z, r24
  c4:	ed e6       	ldi	r30, 0x6D	; 109
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	80 83       	st	Z, r24
  ce:	eb e6       	ldi	r30, 0x6B	; 107
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	80 83       	st	Z, r24
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 b9       	out	0x05, r24	; 5
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret

000000e6 <scrollInMenu>:
	}
}
*/

int scrollInMenu() {
	unsigned char buttonState = PINB & 0b00000100;
  e6:	83 b1       	in	r24, 0x03	; 3
	if (scrollButtonState == 1) {
  e8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <scrollButtonState>
  ec:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <scrollButtonState+0x1>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	11 f0       	breq	.+4      	; 0xfa <scrollInMenu+0x14>
		return 1;
		scrollButtonState = 0;
		lastScrollButtonPress = millis();
		} else {
		return 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  fa:	08 95       	ret

000000fc <selectMode>:

int selectMode() {
	unsigned char buttonState = PIND & 0b00001000;
  fc:	89 b1       	in	r24, 0x09	; 9
	if (selectResetButtonState == 1) {
  fe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 102:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	11 f0       	breq	.+4      	; 0x110 <selectMode+0x14>
		return 1;
		selectResetButtonState = 0;
		lastSelectButtonPress = millis();
		} else {
		return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
	}
 110:	08 95       	ret

00000112 <printWelcomeScreen>:
enum Modes {Slave, Bluetooth, Autonoom};	

extern void lcd_backlight(char on);    //not in lcd.h

void printWelcomeScreen(void) {
	lcd_clrscr();
 112:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_clrscr>
	lcd_gotoxy(0, 0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
	lcd_puts_P("Debuggy");
 11e:	88 e6       	ldi	r24, 0x68	; 104
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_puts_p>
	lcd_gotoxy(0, 1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
	lcd_puts("Team Antimotive"); 
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
 136:	08 95       	ret

00000138 <lcdDisplayInit>:
}

void lcdDisplayInit(void) {
	 lcd_init(LCD_ON_DISPLAY);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_init>
	 lcd_backlight(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 15 02 	call	0x42a	; 0x42a <lcd_backlight>
	 lcd_backlight(1);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 15 02 	call	0x42a	; 0x42a <lcd_backlight>
	 printWelcomeScreen();
 14a:	0e 94 89 00 	call	0x112	; 0x112 <printWelcomeScreen>
 14e:	08 95       	ret

00000150 <printModeScreen>:
}

void printModeScreen(enum Modes mode) {
	switch (mode) {
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	79 f0       	breq	.+30     	; 0x172 <printModeScreen+0x22>
 154:	18 f0       	brcs	.+6      	; 0x15c <printModeScreen+0xc>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	b9 f0       	breq	.+46     	; 0x188 <printModeScreen+0x38>
 15a:	21 c0       	rjmp	.+66     	; 0x19e <printModeScreen+0x4e>
		case Slave:
		lcd_clrscr();
 15c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
		lcd_puts("Slave");
 168:	85 e1       	ldi	r24, 0x15	; 21
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
		break;
 170:	08 95       	ret
		
		case Bluetooth:
		lcd_clrscr();
 172:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
		lcd_puts("Bluetooth");
 17e:	8b e1       	ldi	r24, 0x1B	; 27
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
		break;
 186:	08 95       	ret
		
		case Autonoom:
		lcd_clrscr();
 188:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_clrscr>
		lcd_gotoxy(1, 1);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
		lcd_puts("Autonoom");
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
		break;
 19c:	08 95       	ret
		
		default:
		lcd_clrscr();
 19e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_clrscr>
		lcd_gotoxy(1,1);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
		lcd_puts("hoe kom jij hier");
 1aa:	8e e2       	ldi	r24, 0x2E	; 46
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
 1b2:	08 95       	ret

000001b4 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	8b 01       	movw	r16, r22
 1be:	d4 2f       	mov	r29, r20
 1c0:	88 0f       	add	r24, r24
 1c2:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_start>
 1c6:	88 23       	and	r24, r24
 1c8:	51 f0       	breq	.+20     	; 0x1de <I2C_WRITESEQ+0x2a>
 1ca:	c1 e0       	ldi	r28, 0x01	; 1
 1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <I2C_WRITESEQ+0x32>
 1ce:	f8 01       	movw	r30, r16
 1d0:	ec 0f       	add	r30, r28
 1d2:	f1 1d       	adc	r31, r1
 1d4:	80 81       	ld	r24, Z
 1d6:	0e 94 49 04 	call	0x892	; 0x892 <i2c_write>
 1da:	cf 5f       	subi	r28, 0xFF	; 255
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <I2C_WRITESEQ+0x2c>
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	cd 17       	cp	r28, r29
 1e2:	a8 f3       	brcs	.-22     	; 0x1ce <I2C_WRITESEQ+0x1a>
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	0e 94 41 04 	call	0x882	; 0x882 <i2c_stop>
 1ea:	8c 2f       	mov	r24, r28
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <wr_lcd_mode>:
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <wr_lcd_mode+0xa>
 200:	00 d0       	rcall	.+0      	; 0x202 <wr_lcd_mode+0xc>
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	08 2f       	mov	r16, r24
 20a:	68 30       	cpi	r22, 0x08	; 8
 20c:	71 f4       	brne	.+28     	; 0x22a <wr_lcd_mode+0x34>
 20e:	88 23       	and	r24, r24
 210:	11 f0       	breq	.+4      	; 0x216 <wr_lcd_mode+0x20>
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	01 c0       	rjmp	.+2      	; 0x218 <wr_lcd_mode+0x22>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	87 e2       	ldi	r24, 0x27	; 39
 224:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 228:	26 c0       	rjmp	.+76     	; 0x276 <wr_lcd_mode+0x80>
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	16 2f       	mov	r17, r22
 230:	18 2b       	or	r17, r24
 232:	19 83       	std	Y+1, r17	; 0x01
 234:	80 2f       	mov	r24, r16
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	81 2b       	or	r24, r17
 23a:	84 60       	ori	r24, 0x04	; 4
 23c:	8a 83       	std	Y+2, r24	; 0x02
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	8b 83       	std	Y+3, r24	; 0x03
 242:	20 e1       	ldi	r18, 0x10	; 16
 244:	02 9f       	mul	r16, r18
 246:	c0 01       	movw	r24, r0
 248:	11 24       	eor	r1, r1
 24a:	81 2b       	or	r24, r17
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	8c 83       	std	Y+4, r24	; 0x04
 250:	8b 7f       	andi	r24, 0xFB	; 251
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	45 e0       	ldi	r20, 0x05	; 5
 256:	be 01       	movw	r22, r28
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	87 e2       	ldi	r24, 0x27	; 39
 25e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 262:	10 fd       	sbrc	r17, 0
 264:	08 c0       	rjmp	.+16     	; 0x276 <wr_lcd_mode+0x80>
 266:	03 30       	cpi	r16, 0x03	; 3
 268:	30 f4       	brcc	.+12     	; 0x276 <wr_lcd_mode+0x80>
 26a:	e3 ef       	ldi	r30, 0xF3	; 243
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <wr_lcd_mode+0x78>
 272:	00 c0       	rjmp	.+0      	; 0x274 <wr_lcd_mode+0x7e>
 274:	00 00       	nop
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <lcd_gotoxy>:
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	d8 2f       	mov	r29, r24
 290:	c6 2f       	mov	r28, r22
 292:	e6 2f       	mov	r30, r22
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ef 5f       	subi	r30, 0xFF	; 255
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	80 81       	ld	r24, Z
 29c:	8d 2b       	or	r24, r29
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
 2a6:	d0 93 98 01 	sts	0x0198, r29	; 0x800198 <_lcd_x>
 2aa:	c0 93 99 01 	sts	0x0199, r28	; 0x800199 <_lcd_y>
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <lcd_clrscr>:
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
 2bc:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <_lcd_y>
 2c0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_lcd_x>
 2c4:	08 95       	ret

000002c6 <lcd_putc>:
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
 2ca:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <_lcd_x>
 2ce:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <_lcd_maxx>
 2d2:	98 17       	cp	r25, r24
 2d4:	10 f4       	brcc	.+4      	; 0x2da <lcd_putc+0x14>
 2d6:	ca 30       	cpi	r28, 0x0A	; 10
 2d8:	41 f4       	brne	.+16     	; 0x2ea <lcd_putc+0x24>
 2da:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <_lcd_y>
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	60 93 99 01 	sts	0x0199, r22	; 0x800199 <_lcd_y>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_gotoxy>
 2ea:	ca 30       	cpi	r28, 0x0A	; 10
 2ec:	49 f0       	breq	.+18     	; 0x300 <lcd_putc+0x3a>
 2ee:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_lcd_x>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <_lcd_x>
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <lcd_puts>:
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	ec 01       	movw	r28, r24
 30a:	03 c0       	rjmp	.+6      	; 0x312 <lcd_puts+0xe>
 30c:	21 96       	adiw	r28, 0x01	; 1
 30e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_putc>
 312:	88 81       	ld	r24, Y
 314:	81 11       	cpse	r24, r1
 316:	fa cf       	rjmp	.-12     	; 0x30c <lcd_puts+0x8>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <lcd_puts_p>:
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	fc 01       	movw	r30, r24
 324:	03 c0       	rjmp	.+6      	; 0x32c <lcd_puts_p+0xe>
 326:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_putc>
 32a:	fe 01       	movw	r30, r28
 32c:	ef 01       	movw	r28, r30
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	84 91       	lpm	r24, Z
 332:	81 11       	cpse	r24, r1
 334:	f8 cf       	rjmp	.-16     	; 0x326 <lcd_puts_p+0x8>
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <lcd_init+0xa>
 346:	00 d0       	rcall	.+0      	; 0x348 <lcd_init+0xc>
 348:	00 d0       	rcall	.+0      	; 0x34a <lcd_init+0xe>
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	94 e3       	ldi	r25, 0x34	; 52
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	8c 83       	std	Y+4, r24	; 0x04
 35e:	94 e2       	ldi	r25, 0x24	; 36
 360:	9d 83       	std	Y+5, r25	; 0x05
 362:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	80 81       	ld	r24, Z
 370:	80 5f       	subi	r24, 0xF0	; 240
 372:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	80 5f       	subi	r24, 0xF0	; 240
 378:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 37a:	84 b1       	in	r24, 0x04	; 4
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	84 b9       	out	0x04, r24	; 4
 380:	85 b1       	in	r24, 0x05	; 5
 382:	80 62       	ori	r24, 0x20	; 32
 384:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 386:	0e 94 15 04 	call	0x82a	; 0x82a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	8b e4       	ldi	r24, 0x4B	; 75
 38c:	9d e1       	ldi	r25, 0x1D	; 29
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_init+0x52>
 392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_init+0x58>
 394:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 396:	43 e0       	ldi	r20, 0x03	; 3
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	87 e2       	ldi	r24, 0x27	; 39
 3a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 3a4:	18 2f       	mov	r17, r24
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
 3a8:	94 e0       	ldi	r25, 0x04	; 4
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_init+0x6e>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <lcd_init+0x74>
 3b0:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 3b2:	43 e0       	ldi	r20, 0x03	; 3
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	87 e2       	ldi	r24, 0x27	; 39
 3bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 3c0:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 3c2:	43 e0       	ldi	r20, 0x03	; 3
 3c4:	be 01       	movw	r22, r28
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	87 e2       	ldi	r24, 0x27	; 39
 3cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 3d0:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 3d2:	43 e0       	ldi	r20, 0x03	; 3
 3d4:	be 01       	movw	r22, r28
 3d6:	6c 5f       	subi	r22, 0xFC	; 252
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	87 e2       	ldi	r24, 0x27	; 39
 3dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_WRITESEQ>
 3e0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
 3ea:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <lcd_init+0xb8>
 3ee:	85 b1       	in	r24, 0x05	; 5
 3f0:	8f 7d       	andi	r24, 0xDF	; 223
 3f2:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	80 2f       	mov	r24, r16
 410:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
}
 414:	26 96       	adiw	r28, 0x06	; 6
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 42a:	68 e0       	ldi	r22, 0x08	; 8
 42c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <wr_lcd_mode>
 430:	08 95       	ret

00000432 <setup>:

long lastPrint = 0;
int firstPrint = 0;

void setup(void) {
	buttonsInit();
 432:	0e 94 57 00 	call	0xae	; 0xae <buttonsInit>
	millis_init();
 436:	0e 94 8e 02 	call	0x51c	; 0x51c <millis_init>
	lcdDisplayInit();
 43a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdDisplayInit>
	remoteControlInit();
 43e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <remoteControlInit>
 442:	08 95       	ret

00000444 <loop>:
	
}

void loop(void) {
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
	if (scrollInMenu()) {
 44c:	0e 94 73 00 	call	0xe6	; 0xe6 <scrollInMenu>
 450:	89 2b       	or	r24, r25
 452:	e1 f0       	breq	.+56     	; 0x48c <loop+0x48>
		if (firstPrint == 0) {
 454:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <firstPrint>
 458:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <firstPrint+0x1>
 45c:	89 2b       	or	r24, r25
 45e:	31 f4       	brne	.+12     	; 0x46c <loop+0x28>
			firstPrint = 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <firstPrint+0x1>
 468:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <firstPrint>
		}
		
		if (mode < Autonoom) {
 46c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <mode>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	20 f4       	brcc	.+8      	; 0x47c <loop+0x38>
			mode++;
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <mode>
 47a:	08 c0       	rjmp	.+16     	; 0x48c <loop+0x48>
			} else if (mode == Autonoom) {
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	19 f4       	brne	.+6      	; 0x486 <loop+0x42>
			mode = Slave;
 480:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <mode>
 484:	03 c0       	rjmp	.+6      	; 0x48c <loop+0x48>
			} else {
			mode = Stop;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <mode>
		}
	}
	
	if ((lastPrint + 1000 < millis()) && firstPrint) {
 48c:	c0 90 46 01 	lds	r12, 0x0146	; 0x800146 <lastPrint>
 490:	d0 90 47 01 	lds	r13, 0x0147	; 0x800147 <lastPrint+0x1>
 494:	e0 90 48 01 	lds	r14, 0x0148	; 0x800148 <lastPrint+0x2>
 498:	f0 90 49 01 	lds	r15, 0x0149	; 0x800149 <lastPrint+0x3>
 49c:	88 ee       	ldi	r24, 0xE8	; 232
 49e:	c8 0e       	add	r12, r24
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	d8 1e       	adc	r13, r24
 4a4:	e1 1c       	adc	r14, r1
 4a6:	f1 1c       	adc	r15, r1
 4a8:	0e 94 ce 02 	call	0x59c	; 0x59c <millis>
 4ac:	c6 16       	cp	r12, r22
 4ae:	d7 06       	cpc	r13, r23
 4b0:	e8 06       	cpc	r14, r24
 4b2:	f9 06       	cpc	r15, r25
 4b4:	a8 f4       	brcc	.+42     	; 0x4e0 <loop+0x9c>
 4b6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <firstPrint>
 4ba:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <firstPrint+0x1>
 4be:	89 2b       	or	r24, r25
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <loop+0x9c>
		printModeScreen(mode);
 4c2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <mode>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 a8 00 	call	0x150	; 0x150 <printModeScreen>
		lastPrint = millis();
 4cc:	0e 94 ce 02 	call	0x59c	; 0x59c <millis>
 4d0:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <lastPrint>
 4d4:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <lastPrint+0x1>
 4d8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lastPrint+0x2>
 4dc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <lastPrint+0x3>
	}
	
	
	 if (selectMode()) {
 4e0:	0e 94 7e 00 	call	0xfc	; 0xfc <selectMode>
 4e4:	89 2b       	or	r24, r25
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <loop+0xac>
		PORTB |= (1<<DDB5);
 4e8:	85 b1       	in	r24, 0x05	; 5
 4ea:	80 62       	ori	r24, 0x20	; 32
 4ec:	85 b9       	out	0x05, r24	; 5
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <loop+0xba>
		} else if (scrollInMenu()) {
 4f0:	0e 94 73 00 	call	0xe6	; 0xe6 <scrollInMenu>
 4f4:	89 2b       	or	r24, r25
 4f6:	19 f0       	breq	.+6      	; 0x4fe <loop+0xba>
		PORTB |= (1<<DDB5);
 4f8:	85 b1       	in	r24, 0x05	; 5
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	85 b9       	out	0x05, r24	; 5
		} 
	
	
	remoteControl();
 4fe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <remoteControl>
}
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	08 95       	ret

0000050c <main>:

int main(void)
{
	setup();
 50c:	0e 94 19 02 	call	0x432	; 0x432 <setup>
	DDRB |= (1<<DDB5);
 510:	84 b1       	in	r24, 0x04	; 4
 512:	80 62       	ori	r24, 0x20	; 32
 514:	84 b9       	out	0x04, r24	; 4
	
	while (1) {
		loop();
 516:	0e 94 22 02 	call	0x444	; 0x444 <loop>
 51a:	fd cf       	rjmp	.-6      	; 0x516 <main+0xa>

0000051c <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
 51c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ms>
 520:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ms+0x1>
 524:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ms+0x2>
 528:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ms+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR2A |= (1<<WGM01);
 52c:	e0 eb       	ldi	r30, 0xB0	; 176
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	82 60       	ori	r24, 0x02	; 2
 534:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS01) | (1<<CS00);
 536:	e1 eb       	ldi	r30, 0xB1	; 177
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	83 60       	ori	r24, 0x03	; 3
 53e:	80 83       	st	Z, r24
	OCR2A = 249;
 540:	89 ef       	ldi	r24, 0xF9	; 249
 542:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK2 |= (1<<OCIE0A);
 546:	e0 e7       	ldi	r30, 0x70	; 112
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	80 83       	st	Z, r24
 550:	08 95       	ret

00000552 <__vector_7>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER2_COMPA_vect)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	8f 93       	push	r24
 55e:	9f 93       	push	r25
 560:	af 93       	push	r26
 562:	bf 93       	push	r27
	ms++;
 564:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ms>
 568:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ms+0x1>
 56c:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <ms+0x2>
 570:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <ms+0x3>
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	a1 1d       	adc	r26, r1
 578:	b1 1d       	adc	r27, r1
 57a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ms>
 57e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <ms+0x1>
 582:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <ms+0x2>
 586:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <ms+0x3>
}
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <millis>:
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 59c:	f8 94       	cli
	uint32_t ret = ms;
 59e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <ms>
 5a2:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <ms+0x1>
 5a6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ms+0x2>
 5aa:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <ms+0x3>
	sei();
 5ae:	78 94       	sei
	return ret;
 5b0:	08 95       	ret

000005b2 <remoteControlInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "SoftSerial.h"

void remoteControlInit(void) {
	SoftSerialInit();
 5b2:	0e 94 bc 03 	call	0x778	; 0x778 <SoftSerialInit>
 5b6:	08 95       	ret

000005b8 <remoteControl>:
}

void remoteControl(void)
{
	sei();
 5b8:	78 94       	sei
		
	if(SoftSerialUnread() > 0)
 5ba:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <SoftSerialUnread>
 5be:	88 23       	and	r24, r24
 5c0:	79 f0       	breq	.+30     	; 0x5e0 <remoteControl+0x28>
	{
		char data = SoftSerialReceiveByte();
 5c2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <SoftSerialReceiveByte>
			
		switch( data )
 5c6:	81 33       	cpi	r24, 0x31	; 49
 5c8:	59 f4       	brne	.+22     	; 0x5e0 <remoteControl+0x28>
		{

			case '1':
				if ((PORTB & (1<<PINB5)) == 0) {
 5ca:	2d 99       	sbic	0x05, 5	; 5
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <remoteControl+0x1e>
					PORTB |= (1<<PINB5);
 5ce:	85 b1       	in	r24, 0x05	; 5
 5d0:	80 62       	ori	r24, 0x20	; 32
 5d2:	85 b9       	out	0x05, r24	; 5
 5d4:	08 95       	ret
					} else if (PORTB & (1<<(PINB5))) {
 5d6:	2d 9b       	sbis	0x05, 5	; 5
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <remoteControl+0x28>
					PORTB &= ~(1<<PINB5);
 5da:	85 b1       	in	r24, 0x05	; 5
 5dc:	8f 7d       	andi	r24, 0xDF	; 223
 5de:	85 b9       	out	0x05, r24	; 5
 5e0:	08 95       	ret

000005e2 <__vector_1>:
{
    while(*str)
    {
        SoftSerialTransmitByte(*str++);
    }
}
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	8f 93       	push	r24
 5ee:	ef 93       	push	r30
 5f0:	ff 93       	push	r31
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <state>
 5f8:	8d b3       	in	r24, 0x1d	; 29
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	8d bb       	out	0x1d, r24	; 29
 5fe:	ee e6       	ldi	r30, 0x6E	; 110
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	8d 7f       	andi	r24, 0xFD	; 253
 606:	80 83       	st	Z, r24
 608:	85 b5       	in	r24, 0x25	; 37
 60a:	8c 7f       	andi	r24, 0xFC	; 252
 60c:	85 bd       	out	0x25, r24	; 37
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	86 bd       	out	0x26, r24	; 38
 612:	87 e2       	ldi	r24, 0x27	; 39
 614:	87 bd       	out	0x27, r24	; 39
 616:	85 b5       	in	r24, 0x25	; 37
 618:	83 60       	ori	r24, 0x03	; 3
 61a:	85 bd       	out	0x25, r24	; 37
 61c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <SoftSerialRXBitCount>
 620:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <SoftSerialRXBits>
 624:	85 b3       	in	r24, 0x15	; 21
 626:	82 60       	ori	r24, 0x02	; 2
 628:	85 bb       	out	0x15, r24	; 21
 62a:	80 81       	ld	r24, Z
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	80 83       	st	Z, r24
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	8f 91       	pop	r24
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_14>:
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
 652:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <state>
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	39 f1       	breq	.+78     	; 0x6a8 <__vector_14+0x68>
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	09 f4       	brne	.+2      	; 0x660 <__vector_14+0x20>
 65e:	4d c0       	rjmp	.+154    	; 0x6fa <__vector_14+0xba>
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	09 f0       	breq	.+2      	; 0x666 <__vector_14+0x26>
 664:	7e c0       	rjmp	.+252    	; 0x762 <__vector_14+0x122>
 666:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <SoftSerialTXBitCount>
 66a:	88 30       	cpi	r24, 0x08	; 8
 66c:	b0 f4       	brcc	.+44     	; 0x69a <__vector_14+0x5a>
 66e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SoftSerialTXBits>
 672:	80 ff       	sbrs	r24, 0
 674:	04 c0       	rjmp	.+8      	; 0x67e <__vector_14+0x3e>
 676:	8b b1       	in	r24, 0x0b	; 11
 678:	82 60       	ori	r24, 0x02	; 2
 67a:	8b b9       	out	0x0b, r24	; 11
 67c:	03 c0       	rjmp	.+6      	; 0x684 <__vector_14+0x44>
 67e:	8b b1       	in	r24, 0x0b	; 11
 680:	8d 7f       	andi	r24, 0xFD	; 253
 682:	8b b9       	out	0x0b, r24	; 11
 684:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SoftSerialTXBits>
 688:	86 95       	lsr	r24
 68a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SoftSerialTXBits>
 68e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <SoftSerialTXBitCount>
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SoftSerialTXBitCount>
 698:	66 c0       	rjmp	.+204    	; 0x766 <__vector_14+0x126>
 69a:	8b b1       	in	r24, 0x0b	; 11
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	8b b9       	out	0x0b, r24	; 11
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <state>
 6a6:	5f c0       	rjmp	.+190    	; 0x766 <__vector_14+0x126>
 6a8:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <SoftSerial_TxHead>
 6ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SoftSerial_TxTail>
 6b0:	98 17       	cp	r25, r24
 6b2:	a9 f0       	breq	.+42     	; 0x6de <__vector_14+0x9e>
 6b4:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <SoftSerial_TxTail>
 6b8:	ef 5f       	subi	r30, 0xFF	; 255
 6ba:	ef 71       	andi	r30, 0x1F	; 31
 6bc:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <SoftSerial_TxTail>
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <state>
 6c6:	8b b1       	in	r24, 0x0b	; 11
 6c8:	8d 7f       	andi	r24, 0xFD	; 253
 6ca:	8b b9       	out	0x0b, r24	; 11
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	eb 5a       	subi	r30, 0xAB	; 171
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	80 81       	ld	r24, Z
 6d4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SoftSerialTXBits>
 6d8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SoftSerialTXBitCount>
 6dc:	44 c0       	rjmp	.+136    	; 0x766 <__vector_14+0x126>
 6de:	ee e6       	ldi	r30, 0x6E	; 110
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	80 83       	st	Z, r24
 6e8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <state>
 6ec:	8c b3       	in	r24, 0x1c	; 28
 6ee:	81 60       	ori	r24, 0x01	; 1
 6f0:	8c bb       	out	0x1c, r24	; 28
 6f2:	8d b3       	in	r24, 0x1d	; 29
 6f4:	81 60       	ori	r24, 0x01	; 1
 6f6:	8d bb       	out	0x1d, r24	; 29
 6f8:	36 c0       	rjmp	.+108    	; 0x766 <__vector_14+0x126>
 6fa:	89 e1       	ldi	r24, 0x19	; 25
 6fc:	87 bd       	out	0x27, r24	; 39
 6fe:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <SoftSerialRXBitCount>
 702:	88 30       	cpi	r24, 0x08	; 8
 704:	90 f4       	brcc	.+36     	; 0x72a <__vector_14+0xea>
 706:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <SoftSerialRXBitCount>
 70a:	8f 5f       	subi	r24, 0xFF	; 255
 70c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <SoftSerialRXBitCount>
 710:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SoftSerialRXBits>
 714:	86 95       	lsr	r24
 716:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SoftSerialRXBits>
 71a:	4a 9b       	sbis	0x09, 2	; 9
 71c:	24 c0       	rjmp	.+72     	; 0x766 <__vector_14+0x126>
 71e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SoftSerialRXBits>
 722:	80 68       	ori	r24, 0x80	; 128
 724:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SoftSerialRXBits>
 728:	1e c0       	rjmp	.+60     	; 0x766 <__vector_14+0x126>
 72a:	ee e6       	ldi	r30, 0x6E	; 110
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	8d 7f       	andi	r24, 0xFD	; 253
 732:	80 83       	st	Z, r24
 734:	8c b3       	in	r24, 0x1c	; 28
 736:	81 60       	ori	r24, 0x01	; 1
 738:	8c bb       	out	0x1c, r24	; 28
 73a:	8d b3       	in	r24, 0x1d	; 29
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	8d bb       	out	0x1d, r24	; 29
 740:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <SoftSerial_RxHead>
 744:	ef 5f       	subi	r30, 0xFF	; 255
 746:	ef 71       	andi	r30, 0x1F	; 31
 748:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <SoftSerial_RxHead>
 74c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <SoftSerial_RxTail>
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SoftSerialRXBits>
 756:	e9 58       	subi	r30, 0x89	; 137
 758:	fe 4f       	sbci	r31, 0xFE	; 254
 75a:	80 83       	st	Z, r24
 75c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <state>
 760:	02 c0       	rjmp	.+4      	; 0x766 <__vector_14+0x126>
 762:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <state>
 766:	ff 91       	pop	r31
 768:	ef 91       	pop	r30
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <SoftSerialInit>:
 778:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <SoftSerial_RxTail>
 77c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <SoftSerial_RxHead>
 780:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SoftSerial_TxTail>
 784:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <SoftSerial_TxHead>
 788:	8a b1       	in	r24, 0x0a	; 10
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	8a b9       	out	0x0a, r24	; 10
 78e:	8b b1       	in	r24, 0x0b	; 11
 790:	84 60       	ori	r24, 0x04	; 4
 792:	8b b9       	out	0x0b, r24	; 11
 794:	8a b1       	in	r24, 0x0a	; 10
 796:	82 60       	ori	r24, 0x02	; 2
 798:	8a b9       	out	0x0a, r24	; 10
 79a:	8b b1       	in	r24, 0x0b	; 11
 79c:	82 60       	ori	r24, 0x02	; 2
 79e:	8b b9       	out	0x0b, r24	; 11
 7a0:	ee e6       	ldi	r30, 0x6E	; 110
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	8d 7f       	andi	r24, 0xFD	; 253
 7a8:	80 83       	st	Z, r24
 7aa:	84 b5       	in	r24, 0x24	; 36
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	84 bd       	out	0x24, r24	; 36
 7b0:	85 b5       	in	r24, 0x25	; 37
 7b2:	83 60       	ori	r24, 0x03	; 3
 7b4:	85 bd       	out	0x25, r24	; 37
 7b6:	e9 e6       	ldi	r30, 0x69	; 105
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	80 83       	st	Z, r24
 7c0:	8c b3       	in	r24, 0x1c	; 28
 7c2:	81 60       	ori	r24, 0x01	; 1
 7c4:	8c bb       	out	0x1c, r24	; 28
 7c6:	8d b3       	in	r24, 0x1d	; 29
 7c8:	81 60       	ori	r24, 0x01	; 1
 7ca:	8d bb       	out	0x1d, r24	; 29
 7cc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <state>
 7d0:	08 95       	ret

000007d2 <SoftSerialReceiveByte>:
 7d2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <SoftSerial_RxHead>
 7d6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <SoftSerial_RxTail>
 7da:	98 17       	cp	r25, r24
 7dc:	d1 f3       	breq	.-12     	; 0x7d2 <SoftSerialReceiveByte>
 7de:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <SoftSerial_RxTail>
 7e2:	ef 5f       	subi	r30, 0xFF	; 255
 7e4:	ef 71       	andi	r30, 0x1F	; 31
 7e6:	e0 93 75 01 	sts	0x0175, r30	; 0x800175 <SoftSerial_RxTail>
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	e9 58       	subi	r30, 0x89	; 137
 7ee:	fe 4f       	sbci	r31, 0xFE	; 254
 7f0:	80 81       	ld	r24, Z
 7f2:	08 95       	ret

000007f4 <SoftSerialUnread>:
/*
 * This function returns the number of unread bytes in the receive buffer.
 */
unsigned char SoftSerialUnread(void)
{
    if(SoftSerial_RxHead == SoftSerial_RxTail)
 7f4:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <SoftSerial_RxHead>
 7f8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <SoftSerial_RxTail>
 7fc:	98 17       	cp	r25, r24
 7fe:	99 f0       	breq	.+38     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
        return 0;
    else if(SoftSerial_RxHead > SoftSerial_RxTail)
 800:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <SoftSerial_RxHead>
 804:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <SoftSerial_RxTail>
 808:	89 17       	cp	r24, r25
 80a:	30 f4       	brcc	.+12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
        return SoftSerial_RxHead - SoftSerial_RxTail;
 80c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SoftSerial_RxHead>
 810:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SoftSerial_RxTail>
 814:	89 1b       	sub	r24, r25
 816:	08 95       	ret
    else
        return SOFTSERIAL_RX_BUFFER_SIZE - SoftSerial_RxTail + SoftSerial_RxHead;
 818:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SoftSerial_RxHead>
 81c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SoftSerial_RxTail>
 820:	89 1b       	sub	r24, r25
 822:	80 5e       	subi	r24, 0xE0	; 224
 824:	08 95       	ret
 * This function returns the number of unread bytes in the receive buffer.
 */
unsigned char SoftSerialUnread(void)
{
    if(SoftSerial_RxHead == SoftSerial_RxTail)
        return 0;
 826:	80 e0       	ldi	r24, 0x00	; 0
    else if(SoftSerial_RxHead > SoftSerial_RxTail)
        return SoftSerial_RxHead - SoftSerial_RxTail;
    else
        return SOFTSERIAL_RX_BUFFER_SIZE - SoftSerial_RxTail + SoftSerial_RxHead;
 828:	08 95       	ret

0000082a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 82a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 82e:	8c e0       	ldi	r24, 0x0C	; 12
 830:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 834:	08 95       	ret

00000836 <i2c_start>:
 836:	94 ea       	ldi	r25, 0xA4	; 164
 838:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 83c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 840:	99 23       	and	r25, r25
 842:	e4 f7       	brge	.-8      	; 0x83c <i2c_start+0x6>
 844:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 848:	98 7f       	andi	r25, 0xF8	; 248
 84a:	98 30       	cpi	r25, 0x08	; 8
 84c:	11 f0       	breq	.+4      	; 0x852 <i2c_start+0x1c>
 84e:	90 31       	cpi	r25, 0x10	; 16
 850:	91 f4       	brne	.+36     	; 0x876 <i2c_start+0x40>
 852:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 856:	84 e8       	ldi	r24, 0x84	; 132
 858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 85c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 860:	88 23       	and	r24, r24
 862:	e4 f7       	brge	.-8      	; 0x85c <i2c_start+0x26>
 864:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 868:	88 7f       	andi	r24, 0xF8	; 248
 86a:	88 31       	cpi	r24, 0x18	; 24
 86c:	31 f0       	breq	.+12     	; 0x87a <i2c_start+0x44>
 86e:	80 34       	cpi	r24, 0x40	; 64
 870:	31 f4       	brne	.+12     	; 0x87e <i2c_start+0x48>
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	08 95       	ret
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 95       	ret
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	08 95       	ret
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	08 95       	ret

00000882 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 882:	84 e9       	ldi	r24, 0x94	; 148
 884:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 888:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 88c:	84 fd       	sbrc	r24, 4
 88e:	fc cf       	rjmp	.-8      	; 0x888 <i2c_stop+0x6>

}/* i2c_stop */
 890:	08 95       	ret

00000892 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 892:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 896:	84 e8       	ldi	r24, 0x84	; 132
 898:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 89c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 8a0:	88 23       	and	r24, r24
 8a2:	e4 f7       	brge	.-8      	; 0x89c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 8a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 8a8:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 8aa:	88 32       	cpi	r24, 0x28	; 40
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <i2c_write+0x20>
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
	return 0;
 8b2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
