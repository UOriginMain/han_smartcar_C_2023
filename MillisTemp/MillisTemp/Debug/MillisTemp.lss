
MillisTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000746  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b0  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000259  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d5  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <millis_init>:
#include <avr/interrupt.h>
volatile uint32_t ms = 0;

void millis_init(void)
{
	ms = 0;
  90:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  94:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  98:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  9c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	// - TOP : 249
	//
	// T_events = T_CPU * N * (TOP + 1)
	// = 1/16 MHz * 64 * (249 + 1)
	// = 1 ms
	TCCR0A |= (1<<WGM01);
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	87 bd       	out	0x27, r24	; 39
	// Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <__vector_14>:
}

// Interrupt Service Routine that is automatically executed as soon as
// timer/counter 0 has reached its compare value
ISR(TIMER0_COMPA_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
	ms++;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	a1 1d       	adc	r26, r1
  e2:	b1 1d       	adc	r27, r1
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:
}

int main(void)
{
	// PB5 output
	DDRB |= (1<<PORTB5);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	84 b9       	out	0x04, r24	; 4
	
	// PB7 input
	DDRB &= ~(1<<DDB7);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	84 b9       	out	0x04, r24	; 4
	
	// Initialize the millisecond counter
	millis_init();
 112:	0e 94 48 00 	call	0x90	; 0x90 <millis_init>
	// Global interrupt enable
	sei();
 116:	78 94       	sei
	uint32_t previousmillis = 0;
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
 11c:	98 01       	movw	r18, r16
	// ms is a 32-bit variable (uint32_t). This means that multiple accesses
	// are needed to read or write the value of ms. There is a chance that
	// in the middle of these multiple accesses, the ms value is written due to
	// the ISR being triggered. In order to make sure the value of ms is not
	// updated when reading it, disable interrupts while reading the value.
	cli();
 11e:	f8 94       	cli
	uint32_t ret = ms;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 128:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	sei();
 130:	78 94       	sei
	while(1)
	{
		// Get the current millis
		currentmillis = millis();
		// Has 'interval' time passed since the last time we checked?
		if((currentmillis - previousmillis) >= interval)
 132:	ac 01       	movw	r20, r24
 134:	bd 01       	movw	r22, r26
 136:	40 1b       	sub	r20, r16
 138:	51 0b       	sbc	r21, r17
 13a:	62 0b       	sbc	r22, r18
 13c:	73 0b       	sbc	r23, r19
 13e:	44 36       	cpi	r20, 0x64	; 100
 140:	51 05       	cpc	r21, r1
 142:	61 05       	cpc	r22, r1
 144:	71 05       	cpc	r23, r1
 146:	58 f3       	brcs	.-42     	; 0x11e <main+0x18>
		{
			// Yes, 'interval' time has passed
			// Save the current millis
			previousmillis = currentmillis;
			// Toggle the LED
			PORTB ^= (1<<PORTB5);
 148:	35 b1       	in	r19, 0x05	; 5
 14a:	20 e2       	ldi	r18, 0x20	; 32
 14c:	23 27       	eor	r18, r19
 14e:	25 b9       	out	0x05, r18	; 5
		// Has 'interval' time passed since the last time we checked?
		if((currentmillis - previousmillis) >= interval)
		{
			// Yes, 'interval' time has passed
			// Save the current millis
			previousmillis = currentmillis;
 150:	8c 01       	movw	r16, r24
 152:	9d 01       	movw	r18, r26
 154:	e4 cf       	rjmp	.-56     	; 0x11e <main+0x18>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
